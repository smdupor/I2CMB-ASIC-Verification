zdebugging {-nousage-} {See these commands for debugging operations: bp bd when examine step run change add delete force view.}
execution {-nousage-} {See step run vsim_break stop.}
{.main clear} {The .main clear command clears the Transcript window.} {-noargs-} 
abort {The abort command halts the execution of a macro file interrupted by a breakpoint or error. When macros are nested, you may choose to abort the last macro only, abort a specified number of nesting levels, or abort all macros. The abort command may be used within a macro to return early.} {[<n> | all]}
{add atv} {The add atv command opens an Assertion Thread View (ATV) window for the specified assert or cover directive (designated by its pathname), at the specified evaluation attempt start time.} {<pathname> <time>}
{add button} {The add button command adds a user-defined button to the Main window button bar. New buttons are added to the right end of the bar.} {<Text> {<Cmd>[: ...]}[Disable | NoDisable] [{<option> <value> ...}]} 
{add dataflow} {The add dataflow command adds the specified process, signal, net, or register to the Dataflow window. Wildcards are allowed.} {<object>... [-connect <source_net> <destination_net>] {[-in] [-out] [-inout] | [-ports]} [-internal] [-nofilter] [-recursive] }
{add list} {The add list command adds the following objects and their values to the List window:  VHDL signals and variables, Verilog nets and registers, and SystemC primitive channels (signals).} {<object_name>... | {<object_name> {sig ...}} [-allowconstants] [-depth <level>] [-filter <f> | -nofilter <f>] {[-in] [-inout] [-out] | [-ports]} [-internal] [-label <name>] [-nodelta] [-optcells] [-<radix_type> | -radix <type>] [-radixenumnumeric | -radixenumsymbolic] [-recursive] [-notrigger | -trigger] [-width <integer>] [-window <wname>]}
{add memory} {The add memory command displays the contents and sets the address and data radix of the specified memory in the MDI frame of the Main window. } {[-addressradix <radix> {decimal | hex}] [-dataradix <type>] [-radixenumnumeric | -radixenumsymbolic] [-wordsperline <num>] <object_name> ...}
{add message} {The add message command is used within a macro or script and specifies a user defined runtime message that is sent to the transcript and .wlf files.} {<message_body> [-category <category>] [-efftime <time>] [-file <filename>] [-id <id_number>] [-inline] [-line <linenumber>] [-noident] [-nolevel] [-objects <list>] [-region region] [-severity {error | note | warning}]} 
{add schematic} {The add schematic command adds the specified process, signal, net, or register to the Schematic window. Wildcards are allowed.} {<object> ... [-connect <source_net> <destination_net>] [-incr | -full] {[-in] [-out] [-inout] | [-ports]} [-internal] [-nofilter] [-recursive] [-window <wname>] } 
{add testbrowser} {The add testbrowser command adds a .ucdb file to the Test Management Browser pane in the Test Management window.} {<ucdb_filename> [<ucdb_filename>...]} 
{add watch} {The add watch command adds signals and variables to the Watch pane in the Main window. SystemC objects and user-defined buses may also be added.} {<object_name> ... [-radix <type>] [-radixenumnumeric | -radixenumsymbolic]} 
{add wave} {The add wave command adds the following objects to the Wave window:  VHDL signals and variables, Verilog nets and registers, and SystemC primitive channels (signals).} {[-allowconstants] [-clampanalog {0|1}] [-color <standard_color_name>] [-depth <level>] [-divider <divider_name>...] [-expand <signal_name>] [-filter <f> | -nofilter <f>] [-format <type> | -<format>] [-group <group_name> [<sig_name1>...]] [-height <pixels>] [[-in] [-out] [-inout] | [-ports]] [-internal] [-label <name>] [-max <real_num>] [-min <real_num>] [-mvcall] [-mvcovm] [-mvcreccomplete] [-noupdate] [-numdynitem <int>] [-optcells] [-position <location>] [-queueends] [-radix <type> | -<radix_type>] [-radixenumnumeric | -radixenumsymbolic] [-recursive] [-startdynitem <int>] [-time] [-window <wname>] [<object_name>...] [{<object_name> {sig1 sig2 ...}}] } 
{add_cmdhelp} {The add_cmdhelp command adds the specified command name, description, and command arguments to the command-line help. You can then access the information using the help command.} {{<command_name>} {<command_description>} {<command_arguments>}} 
add_menu {The add_menu command adds a menu to the menu bar of the specified window, using the specified menu name.} {<window_name> <menu_name> [<shortcut> [-hide_menubutton]]} 
add_menucb {The add_menucb command creates a checkbox within the specified menu of the specified window. A checkbox is a small box with a label. Clicking on the box will toggle the state, from on to off or the reverse.} {<window_name> <menu_name> <text> [-indicatoron {0 | 1}] [-onvalue <onval>] [-offvalue <offval>] [-variable <var>]}
add_menuitem {The add_menuitem command creates a menu item within the specified menu of the specified window. May be used within a submenu.} {<window_name> <menu_path> <text> <cmd> [<shortcut>]}
add_separator {The add_separator command adds a separator as the next item in the specified menu path in the specified window.} {<window_name> <menu_path>}
add_submenu {The add_submenu command creates a cascading submenu within the specified menu path of the specified window. May be used within a submenu.} {<window_name> <menu_path> <name> [<shortcut>]}
alias {The alias command displays or creates user-defined aliases. Any arguments passed on invocation of the alias will be passed through to the specified commands.} {[<name> ["<cmds>"]]}
{archive load} {The archive load command allows you to load an archived debug database (.dbar) file that was previously created with the archive write command.} {<archive_name> [-dbgDir <directory_name>] -wlf <wlf_file_name>}
{archive write} {The archive write command allows you to create a debug archive file, with the file extension .dbar, that contains one or more WLF files, debug information captured from the design library, an optional connectivity debug database file, and optional HDL source files.} {<archive_name> -wlf <wlf_file_name> [-include_src] [-dbg <dbg _file_name>]}
{assertion action} {The assertion action command allows you to set the assertion action for assertion starts, fails, passes, or antecedent matches.} { -cond [start | antecedent | pass | fail | threads <num_of_threads>] -exec [continue | break | exit | tcl_subroutine | kill | off] -actionblock [passon | passoff | failon | failoff | nonvacuouson | vacuousonoff] [-assert | -cover] [-filter <pattern>] [-recursive] [-severity info | note | warning | error | failure | fatal] <path> [<path> ...]}
{assertion active} {The assertion active command instructs the simulator to report on any active assertion directives at the end of simulation.} {-eosnote {on | off} [-filter <pattern>] [-recursive] [-severity info | note | warning | error | failure | fatal] <path> [<path>...]}
{assertion count} {The assertion count command returns the sum of the assertion failure counts for the specified set of assertion directive instances.} {{-fails | -failattempts} [-lang sva | psl | vhdl] [-concurrent | -immediate] [-filter <pattern>] [-severity info | note | warning | error | failure | fatal] [-recursive] <path> [<path> ...]}
{assertion enable} {The assertion enable command enables and disables assertions and cover directives.} {-on | -off | -release [-assert | -cover] [-concurrent | -immediate] [-filter <pattern>] [-force] [-lang {sva | vhdl | psl}]... [-recursive] [-severity info | note | warning | error | failure | fatal] <path> [<path> ...]}
{assertion fail} {The assertion fail command configures simulator behavior in response to a SystemVerilog or PSL assertion failure.} {[-action {continue | break | exit}] [-filter <pattern>] [-limit {<count> | none}] [-log {on | off}] [-lvlog] [-recursive] <path> [<path>...]}
{assertion pass} {The assertion pass command configures simulator behavior in response to a SystemVerilog or PSL assertion pass.} {[-log {on | off}] [-filter <pattern>] [-recursive] <path> [<path>...]}
{assertion profile} {The assertion profile command generates a fine grained profile of memory usage for assertions and cover directives.} {[-threadthreshold <number_of_threads>] on | off}
{assertion report} {The assertion report command returns a status report for each SystemVerilog or PSL assertion matching the path specification.} {[-append] [-failed] [-file <filename>] [-filter <pattern>] [-lang psl|sva|vhdl] [-noconcurr] [-noimmed] [-profile] [-recursive] [-severity info|note|warning|error|failure|fatal] [-totalmemory] [-verbose] [-xml] <path>...}
{atv log} {The atv log command enables or disables assertion thread viewing for the specified assertion(s).} {{-disable | -enable} [-asserts] [-covers] [-recursive] <path> [<path> ...] }
batch_mode {The batch_mode command returns a 1 if Questa is operating in batch mode, otherwise it returns a 0. It is typically used as a condition in an if statement.} {-noargs-}
bd {The bd command deletes a breakpoint. You must specify a filename and line number or a specific breakpoint id#. You can delete multiple breakpoints by specifying separate information groupings on the same command line.} {[<filename> <line_number>] | [<id#> | <label>]}
{bookmark add wave} {The bookmark add wave command creates a named reference to a specific zoom range and scroll position in the specified Wave window. Bookmarks are saved in the wave format file and are restored when the format file is read.} {<label> [[<range_start> [unit]] [<range_end> [unit]] [<topindex>]] [-window <window_name>]}
{bookmark delete wave} {The bookmark delete wave command deletes bookmarks from the specified Wave window.} {{<label> |-all} [-window <window_name>]}
{bookmark goto wave} {The bookmark goto wave command zooms and scrolls a Wave window using the specified bookmark.} {<label> [-window <window_name>]}
{bookmark list wave} {The bookmark list wave command displays a list of available bookmarks in the Transcript pane.} {[-window <window_name>]}
bp {The bp or breakpoint command either sets a file-line or function breakpoint or returns a list of currently set breakpoints.} {{<filename> <line_number> | in <task_or_fcn>} {-c {<function_name> | [<file_name>:] <line_number> | *0x<hex_address>}} [-ancestor] [-appendinst] [-cond "<condition_expression>"] [-disable] [-id <id#> | -label "<label>"] [-uvm] [-inst <region> [-inst <region>...]] [<command>...] | [-query <filename> [<line_number> ]]}
call {Calls SystemVerilog static functions and class functions directly from the vsim command line in live simulation mode. Tasks are not supported. Also calls PLI/VPI system tasks/functions.} {[-env <hierEnvPath>] [<pathToFunction> [<classInstancePath>] | [-builtin | -usertf] <systfName>] [<arg1> [<arg2>] ... [<argN>]]}
cd {The cd command changes the local directory to the specified directory.} {[<dir>]}
cdbg {The cdbg command provides command-line equivalents of the menu options that are available for C Debug.} {allow_lib_step on|off | auto_find_bp | debug_on | enable_auto_step on|off | init_mode_complete | init_mode_setup | interrupt | keep_user_init_bps on|off | quit | refresh_source_window | set_debugger <path> | show_source_balloon on|off | stop_on_quit on|off | trace_entry_point on|off [<function_name>]}
change {The change command modifies the value of a VHDL constant, generic, or variable; Verilog register or variable; or C variable if running C Debug.} {<variable> <value>}
change_menu_cmd {The change_menu_cmd command changes the command to be executed for a specified menu item label, in the specified menu, in the specified window.} {<window_name> <menu_path> <label> <cmd>}
{check contention add} {The check contention add command enables contention checking for the specified nodes.} {{[-in] [-out] [-inout] | [-ports]} [-internal] [-r] <node_name>...}
{check contention config} {The check contention config command allows you to write checking messages to a file (messages display on your screen by default).} {[-file <filename>] [-time <limit>[<unit>]]}
{check contention off} {The check contention off command disables contention checking for the specified nodes.} {[-all] {[-in] [-out] [-inout] | [-ports]} [-internal] [-r] <node_name>...}
{check float add} {The check float add command enables float checking for the specified nodes.} {{[-in] [-out] [-inout] | [-ports]} [-internal] [-r] <node_name>...}
{check float config} {The check float config command allows you to write checking messages to a file (messages display on your screen by default). You may also configure the float time limit.} {[-file <filename>] [-time <time><unit>]}
{check float off} {The check float off command disables float checking for the specified nodes.} {[-all] {[-in] [-out] [-inout] | [-ports]} [-internal] [-r] <node_name>...}
{check stable off} {The check stable off command disables stability checking.} {-noargs-}
{check stable on} {The check stable on command enables stability checking on the entire design.} {[-period <time>[<unit>]] [-file <filename>] [-strobe <time>[<unit>]]}
checkpoint {The checkpoint command saves the state of your simulation.} {<filename>}
{classinfo ancestry} {Returns class inheritance hierarchy for the specified class type.} {[-dataset <name>] [-n] [-tcl] [ -o <outfile>] <class_type>}
{classinfo descriptive} {Returns the descriptive class name for the specified authoritative class name.} {[-dataset <name>] [ -exact | -glob | -regexp] [-tcl] [ -o <outfile>] <class_type>}
{classinfo find} {Verifies whether a class instance exists or not.} {[-dataset <name>] [-tcl] [-o <outfile>] <class_instance_identifier>}
{classinfo implements} {Lists which classes implement SystemVerilog interface classes.} {[-dataset <name>] [-tcl] [-o <outfile>] <class_type>}
{classinfo instances} {Lists the class instances for the specified class type.} {[-dataset <name>] [-tcl] [-verbose] [-o <outfile>] <class_type>}
{classinfo interfaces} {Lists the interface class types that match or do not match a specified pattern.} {[-dataset <name>] [-tcl] [-o <outfile>] <class_type>}
{classinfo isa} {Returns a list of all classes extended from the specified class type.} {[-dataset <name>] [-n] [-o <outfile>] [-tcl] <class_type>}
{classinfo report} {Creates a customized report of all classes from the start of simulation.} {[-c [fntpc]] [-dataset <name>] [-m <maxout>] [-sort [a | d][f | n | t | p | c]] [-o <outfile>] [-tcl] [-z]}
{classinfo stats} {Displays statistics for the class types from the start of simulation: Number of class types, max, peak, and current number of class instances.} {[-dataset <name>] [-tcl] [-o <outfile>]}
{classinfo trace} {Displays active references to the specified class instance.} {[-dataset <name>] [-m <maxout>] [-tcl] [-o <outfile>] <class_instance_name>}
{classinfo types} {Lists the class types that match or do not match the specified pattern.} {[-dataset <name>] [-exact | -glob | -regexp] [-n] [-o <outfile>] [-tcl] [-x] <pattern>} 
{compare add} {The compare add command creates an object that is a comparison between signals in a reference design against signals in a test design. You can specify whether to compare two signals, all signals in the region, or just ports or a subset of ports. Constant signals such as parameters and generics are ignored.} {[-all] {[-in] [-inout] [-out] | [-ports]} [-internal] [-label <label>] [-list] [-rebuild] [-recursive] [-separator <string>] [<testPath>] [-tol <time>[<unit>]] [-tolLead <time>[unit]] [-tolTrail <time>[unit]] [-verbose] [-vhdlmatches {<ref-logic-value>=<test-logic-value>:...}] [-vlogmatches {<ref-logic-value>=<test-logic-value>:...}] [-wave] [-wavepane <n>] [-when {"<expression>"}] [-win <wname>] [-nowin] {-clock <name>} <referencePath> [-help]}
{compare annotate} {The compare annotate command either flags a comparison difference as "ignore" or adds a text string annotation to the difference. The text string appears when the difference is viewed in info popups or in the output of a compare open command.} {[-ignore] [-noignore] [-text <message>] <idNum1> [<idNum2>...]}
{compare clock} {The compare clock command defines a clock that can then be used for clocked-mode comparisons. In clocked-mode comparisons, signals are sampled and compared only at or just after an edge on some signal.} {[-delete] [-offset <delay>[unit]] [-rising | -falling | -both] [-when {"<expression>"}] {<clock_name> <signal_path>}}
{compare configure} {The compare configure command modifies options for compare signals and regions. The modified options are applied to all objects in the specified compare path.} {[-clock <name>] [-recursive] [-tol <time>[unit]] [-tolLead <time>[<unit>]] [-tolTrail <time>[<unit>]] [-vhdlmatches {<ref-logic-value>=<test-logic-value>:...}] [-vlogmatches {<ref-logic-value>=<test-logic-value>:...}] [-when {"<expression>"}] <comparePath>}
{compare continue} {This command is used to continue with comparison difference computations that were suspended using the compare stop button or Control-C. If the comparison was not suspended, compare continue has no effect.} {-noargs-}
{compare delete} {The compare delete command deletes a comparison object from the currently open comparison.} {[-recursive] {<objectPath> }}
{compare end} {The compare end command closes the active comparison without saving any information.} {-noargs-}
{compare info} {The compare info command lists the results of the comparison in the Main window transcript. To save the information to a file, use the -write argument.} {[-all] [-count] [-primaryonly] [-signals] [-secondaryonly] [<startNum> [<endNum>]] [-summary] [-write <filename>]}
{compare list} {Displays in the Transcript pane a list of all the compare add commands currently in effect.} {[-expand]}
{compare options} {The compare options command sets defaults for various waveform comparison commands. Those defaults are used when other compare commands are invoked during the current session. To set defaults permanently, edit the appropriate PrefCompare() Tcl variable.} {[-addwave] [-all] {[-in] [-inout] [-out] | [-ports]} [-internal] [-noaddwave] [-ignoreVlogStrengths] [-noignoreVlogStrengths] [-maxsignal <n>] [-maxtotal <n>] [-listwin <name>] [-separator <string>] [-tol <time>[<unit>]] [-tolLead <time>[<unit>]] [-tolTrail <time>[<unit>]] [-track] [-notrack] [-vhdlmatches {<ref-logic-value>=<test-logic-value>:...}] [-vlogmatches {<ref-logic-value>=<test-logic-value>:...}] [-wavepane <n>] [-wavewin <name>]}
{compare reload} {The compare reload command reloads comparison differences to allow their viewing without recomputation. Prior to invoking compare reload, you must open the relevant datasets with the same names that were used during the original comparison.} {<rulesFilename> <diffsFilename>}
{compare reset} {Clears the current compare differences, allowing another compare run command to be executed. Does not modify any of the compare options or any of the signals selected for comparison. This allows you to re-run the comparison with different options or with a modified signal list.} {-noargs-}
{compare run} {The compare run command runs the difference computation on the signals selected via a compare add command. Reports in the Transcript pane the total number of errors found.} {[<startTime>[<unit>]] [<endTime>[<unit>]]}
{compare savediffs} {The compare savediffs command saves the comparison results to a file that can be reloaded later. To be able to reload the file later, you must also save the comparison setup using the compare saverules command.} {<diffsFilename>}
{compare saverules} {The compare saverules command saves the comparison setup information (or "rules") to a file that can be re-executed later. The command saves compare options, clock definitions, and region and signal selections.} {[-expand] <rulesFilename>}
{compare see} {The compare see command displays the specified comparison difference in the Wave window using whatever horizontal and vertical scrolling are necessary. The signal containing the specified difference will be highlighted, and the active cursor will be positioned at the starting time of the difference.} {[-first] [-last] [-next] [-nextanno] [-previous] [-prevanno] [-wavepane <n>] [-wavewin <name>]}
{compare start} {The compare start command begins a new dataset comparison. The datasets that you'll be comparing must already be open.} {[-batch] [-maxsignal <n>] [-maxtotal <n>] [-refDelay <delay>[<unit>]] [-testDelay <delay>[<unit>]] [<reference_dataset>] <test_dataset>}
{compare stop} {This command is used internally by the compare stop button to suspend comparison computations in progress. If a compare run execution has returned to the VSIM prompt, compare stop has no effect. Under Unix, entering a Control-C character in the window that invoked Questa has the same effect as compare stop.} {-noargs-}
{compare update} {This command is primarily used internally to update the comparison differences when comparing a live simulation against a .wlf file. The compare update command is called automatically at the completion of each simulation run if the "-track" compare option is in effect.} {-noargs-}
configure {The configure command invokes the List or Wave widget configure command for the current default List or Wave window.} {list | wave [-window <wname>] [<option> <value>] [-delta [all | collapse | events | none]] [-gateduration [<duration_open>]] [-gateexpr [<expression>]] [-usegating [off | on]] [-strobeperiod [<period>[<unit>]]] [-strobestart [<start_time>[<unit>]]] [-usesignaltriggers [0 | 1]] [-usestrobe [0 | 1]] [-childrowmargin [<pixels>]] [-cursorlockcolor [<color>]] [-gridauto [off | on]] [-gridcolor [<color>]] [-griddelta [<pixels>]] [-gridoffset [<time>[<unit>]]] [-gridperiod [<time>[<unit>]]] [-namecolwidth [<width>]] [-rowmargin [<pixels>]] [-signalnamewidth [<value>]] [-timecolor [<color>]] [-timeline [0 | 1]] [-timelineunits [fs | ps | ns | us | ms | sec | min | hr]] [-valuecolwidth [<width>]] [-vectorcolor [<color>]] [-waveselectcolor [<color>]] [-waveselectenable [0 | 1]]}
context {The context command provides several operations on a context's name. The option you specify determines the operation.} {context {children <name> | current <name> | dataset | du <name> | exists <name> | fullpath <name> | isCell <name> | isHierBlock <name> | isInst <name> | isLoggable <name> | isNet <name> | isPrimitive <name> | isProc <name> | isProcessScopt <name> | isScope <name> | isVar <name> | isVhdl <name> | join <name>... | name <name> | parent <name> | path <name> | split <name> | tail <name> | type <name> | visibility <name>}}
{coverage analyze} {Displays test oriented information based on a vcover merge operation. Some arguments for this command require that the merge which created the data was performed with the test-associated merge (vcover merge performed with -testassociated). This command is only available during post-simulation processing, when a UCDB file is opened with vsim -viewcov. Type 'coverage analyze -help' for complete syntax, or see "coverage analyze" in the Reference Manual for syntax and usage details.} {-noargs-}
{coverage attribute} {The coverage attribute command is used to display or set test attributes, ucdb attributes, or object attributes in the currently loaded database. Also used to set trend data for UCDBs. Type 'coverage attribute -help' for complete syntax.} {-noargs-}
{coverage clear} {The coverage clear command clears specified types of coverage data from the UCDB and unloads the current exclusion filter file.cov} {[-code {b|c|e|s|t|f}... ] [-codeAll] [-assert] [-cvg] [-directive] [-du <du_name> | -instance <pathname>] [-excluded] [-match <str>] [-path <obj>+] [-recursive]}
{coverage create} {The coverage crete command creates covergroups, coverpoints, crosses and bins under a specified parent in an existing UCDB file. It can only be used in Coverage View mode.} {{<name> {-parent <path>}{-cvg | -cvginstance | -cvp} | -cross {-item <cvpname1> -item <cvpname2> -item <cvpnameN>} | -cvb {[-count <count_val>] [-illegal | -ignore]}}}
{coverage edit} {The coverage edit command opens a coverage dataset (.ucdb) to edit the contents. Used only in Coverage View mode (vsim -viewcov). Can be used to delete or preserve a subset of a UCDB: by instance, DU, all instances of DU, or according to coverage type. See "coverage edit" in the Reference Manual for syntax and usage details.} {-noargs-}
{coverage exclude} {The coverage exclude command allows you to exclude the following from coverage statistics: specified lines in a source file; datasets (.wlf files); coverage types within datasets; source file(s); lines within a source file; rows within a condition or expression truth table; instances or design units; transitions or states within a Finite State Machine; toggle nodes; assertions; cover directives; and covergroups. Type 'coverage exclude -help' while your design is loaded for complete syntax.} {-noargs-}
{coverage goal} {The coverage goal command sets or displays the value of: 1) goals for specific bins or coverage items; 2) goals for specific scopes in the design hierarchy; or 3) UCDB-wide goals for coverage summary types. Enter 'coverage goal -help' for complete syntax.} {-noargs-} 
{coverage open} {The coverage open command opens coverage datasets (.ucdb) for viewing in the GUI in Coverage View mode. This command is equivalent to the command vsim -viewcov.} {<filename> [<logicalname>]}
{coverage ranktest} {The coverage ranktest command ranks coverage data according to user-specified tests.} {{<UCDB_inputfile1> [... <UCDB_inputfileN>]} [-algorithm {greedy | quick}] [-assertion] [-assertfailure] [-code {b|c|e|s|t|f}...] [-codeAll] [-cvg] [-directive] [-nocompulsoryordering | -compulsorysorting | -compulsoryranking] [-error <msg_number> [, msg_number>, ...] [-fewest | -cputime | -simtime] [-goal [<coverage_type>] <percentage>] [-inputs <file_list>] [-j <number>] [-log <filename>] [-maxcpu <real_num_in_seconds>] [-maxtests <int>] [-metric {aggregate | total}] [-note <msg_number> [, msg_number>, ...] [-path <path> | -du <du_name> | -plansection <path>] [-precision <int_num>] [-quiet | -concise | -verbose] [-rankfile <filename>] [-suppress <msg_number> [, msg_number>, ...] [-warning <msg_number> [, msg_number>, ...] [-weight <coverage_type> <integer>]}
{coverage report} {The coverage report command produces textual output of coverage statistics or exclusions. Type 'coverage report -help' for complete syntax.} {-noargs-}
{coverage save} {The coverage save command saves coverage statistics from the currently active simulation to a file that can be reloaded later, preserving instance-specific information.} {[-instance <path>] [-code {b|c|e|s|t|f}...] [-codeAll] [-du <du_name>] [-empty <my_test_ucdb>] [-testname <test_name>] [-norecursive] [-onexit] [-prune <inst_path>] [<file_name>] [-assert] [-coveredfcov] [-cvg] [-directive] [-help]} 
{coverage tag} {The coverage tag command is used to create links between specified objects in the coverage database, or to link specific coverage objects to records in a test plan. A tag is used to associate the objects. This command is only available during post-simulation processing, with vsim -viewcov. Type 'coverage tag -help' for complete syntax.} {-noargs-}
{coverage testnames} {The coverage testnames command is used to list the test names in a currently loaded UCDB file. This command is only available during post-simulation processing (vsim -viewcov).} {coverage testnames [-tcl]}
{coverage unlinked} {The coverage unlinked command is used as a diagnostic tool to report on test plan items with no coverage associated, or design coverage that has not been associated with an item in a test plan. Available only in post-simulation, through vsim -viewcov. Type 'coverage unlinked -help' for complete syntax.} {-noargs-}
{coverage weight} {The coverage weight command sets or displays weights used for total coverage calculations: 1) global per-type weights, or 2) scope weights. Total coverage calculations are exposed with the coverage analyze -total command; this includes total coverage numbers for test plans in the Tracking tab in the Verification Management layout. The following is a list of syntax arguments without information on usage. For more detailed command usage information, type 'coverage weight -help' or refer to 'coverage weight' in the Reference Manual.} {[-bins] [-bydu] [-byinstance] [-type] [-feccond] [-fecexpr] [-fstate] [-ftrans] [-attempted] [-active] [-disabled] [-fail] [-pass] [-vpass] [-path | -du | -plansection <path>] [-udpcond] [-udpexpr] [-assert] [-cvg] [-code {b|c|e|s|t|f}...] [-codeAll] [-directive] <integer_weight>}
{dataset alias} {The dataset alias command assigns an additional name (alias) to a dataset. The dataset can then be referenced by that alias. A dataset can have any number of aliases, but all dataset names and aliases must be unique.} {<dataset_name> [<alias_name>]}
{dataset clear} {The dataset clear command removes all event data from the current simulation WLF file while keeping all currently logged signals logged. Subsequent run commands will continue to accumulate data in the WLF file.} {-noargs-}
{dataset close} {The dataset close command closes an active dataset. To open a dataset, use the dataset open command.} {<dataset_name> | -all}
{dataset config} {The dataset config command configures WLF file parameters after a WLF file has already been opened.} {<dataset_name> [-wlfcachesize [<n>]] [-wlfdeleteonquit [0 | 1] ] [-wlfopt [0 | 1] ]}
{dataset current} {The dataset current command opens the specified dataset and sets the GUI context to the last selected context of the specified dataset.} {[<dataset_name>]}
{dataset info} {The dataset info command reports a variety of information about a dataset.} {{name | file | exists} <dataset_name>}
{dataset list} {The dataset list command lists all active datasets.} {[-long]}
{dataset open} {The dataset open command opens a WLF file (representing a prior simulation) and assigns it the logical name that you specify. To close a dataset, use dataset close.} {<file_name> [<dataset_name>]}
{dataset rename} {The dataset rename command changes the logical name of a dataset to the new name you specify.} {<dataset_name> <new_dataset_name>}
{dataset restart} {The dataset restart command unloads the specified dataset or current dataset and reloads the file using the same pathname.} {[<file_name>]}
{dataset save} {The dataset save command writes data from the current simulation to the specified file. This lets you save simulation data while the simulation is still in progress.} {<dataset_name> <file_name>}
{dataset snapshot} {The dataset snapshot command saves data from the current WLF file (vsim.wlf by default) at a specified interval. This lets you take sequential or cumulative "snapshots" of your simulation data.} {[-dir <directory>] [-disable] [-enable] [-file <file_name>] [-filemode {overwrite | increment}] [-mode {cumulative | sequential}] [-report] [-reset] [-size <file_size> | -time <n> [unit]]}
delete {The delete command removes objects from either the List or Wave window.} {list | wave [-window <wname>] <object_name>...}
describe {The describe command displays information about the specified HDL object, C variable, or design region.} {<name> ...}
disablebp {The disablebp command turns off breakpoints and when commands. To turn the breakpoints or when statements back on again, use the enablebp command.} {[<id#> | <label>]}
disable_menu {The disable_menu command disables the specified menu within the specified window.} {<window_name> <menu_path>}
disable_menuitem {The disable_menuitem command disables a specified menu item within the specified menu path of the specified window.} {<window_name> <menu_path> <label>}
do {The do command executes commands contained in a macro file.} {<filename> [<parameter_value> ...]}
down {The down command searches for object transitions or values in the specified List window.} {[-expr <expression>] [-falling] [<n>] [-noglitch] [-rising] [-value <sig_value>] [-window]}
drivers {The drivers command displays the names of all drivers of the specified object.} {<object_name> [-source]}
dumplog64 {The dumplog64 command dumps the contents of the specified WLF file in a readable format to stdout. The WLF file cannot be opened for writing in a simulation when you use this command.} {<filename>}
echo {The echo command displays a specified message in the Transcript pane.} {[<text_string>]}
edit {The edit command invokes the editor specified by the EDITOR environment variable. By default, the specified filename will open in Questa Source editor.} {[<filename>]}
enablebp {The enablebp command turns on breakpoints and when commands that were previously disabled.} {[<id#> | <label>]}
enable_menu {The enable_menu command enables a previously-disabled menu.} {<window_name> <menu_path>}
enable_menuitem {The enable_menuitem command enables a previously-disabled menu item.} {<window_name> <menu_path> <label>}
{encoding convertfrom} {Convert a data string to 16-bit Unicode from the named encoding.} {<encoding_name> <string>}
{encoding convertto} {Convert a data string from 16-bit Unicode to the named encoding.} {<encoding_name> <string>}
{encoding system} {Changes the current system encoding to the named encoding. If a new encoding is omitted the command returns the current system encoding.} {<encoding_name>}
{encoding names} {The encoding names command returns a list of valid arguments for the encoding system command.} {-noargs-}
environment {The environment, or env command, allows you to display or change the current dataset and region/signal environment.} {[-dataset | -nodataset] [<pathname> | -forward | -back]}
examine {The examine command examines one or more objects and displays current values (or the values at a specified previous time) in the Transcript pane. It optionally can compute the value of an expression of one or more objects. If you are using C Debug , examine can display the value of a C variable as well.} {<name>... [-delta <delta>] [-env <path>] [-event <time>] [-handle] {[-in] [-out] [-inout] | [-ports]} [-internal] [-maxlen <integer>] [-expr <expression>] [-name] [-<radix_type>] [-radix <type>] [-radixenumnumeric | -radixenumsymbolic] [-showbase] [-time <time>] [-value] }
exit {The exit command exits the simulator and the Questa application.} {[-force] [-code <integer>]}
{fcover configure} {The fcover configure command enables, disables, and sets coverage targets for SystemVerilog and PSL cover directives.} {<coverage_directive>... [-at_least <count>] [-disable] [-enable] [-exclude] [-include] [-limit <count>] [-log {on | off}] [-recursive] [-weight <integer>]}
{find connections} {The find connections command a list of nets in the design that are electrically equivalent to the net you specify. Available only during a live simulation.} {<net> }
{find drivers} {The find drivers command traces backward in time to find the active driver(s), processes, or first elements of a specified signal or signal event. Type 'find drivers -help' for complete syntax.} {-noargs-}
{find nets} {The find nets command locates nets in the design whose names match the name specification you provide.} {<object_name>... [-internal] [-nofilter] {[-in] [-inout] [-out] | [-ports]} [-recursive]}
{find signals} {The find signals command locates nets in the design whose names match the name specification you provide.} {<object_name>... [-internal] [-nofilter] {[-in] [-inout] [-out] | [-ports]} [-recursive]}
{find instances} {The find instances command locates instances in the design whose names match the name specification you provide.} {{<object_name> ... | -bydu <design_unit> | -file <file_name>} [-arch] [-recursive] [-nodu]}
{find blocks} {The find blocks command locates blocks in the design whose names match the name specification you provide.} {<object_name> ... [-recursive]}
{find virtuals} {The find virtuals command locates virtual objects in the design whose names match the name specification you provide.} {<object_name> ... [-kind <kind>] [-unsaved] [-recursive] }
{find classes} {The find classes command locates incrTcl classes in the design whose names match the name specification you provide.} {<class_name>}
{find objects} {The find objects command locates objects in the design whose names match the name specification you provide.} { [-class <class_name>] [-isa <class_name>] [<object_name>]} 
{find infiles} {The find infiles command searches the specified files and prints to the Transcript pane those lines from the files that match the specified pattern.} {<string_pattern> {<file> ...}}
{find insource} {The find insource command searches all source files related to the current design and prints to the Transcript pane those lines from the files that match the specified pattern. } {<pattern> [-exact | -glob | -regexp] [-inline] [-nocase]} 
formatTime {The formatTime command provides global format control for all time values displayed in the GUI.} {[[[+|-]commas] [[+|-]nodefunits] [[+|-]bestunits]]}
force {The force command allows you to apply stimulus interactively to VHDL signals and Verilog nets.} {<object_name> {<value> [[@]<time_info>][, <value> [[@]<time_info>]...} [-freeze | -drive | -deposit] [-cancel [@]<time_info>] [-repeat [@]<time_info>]}
{fsm list} {The fsm list command returns information about all recognized finite state machines.} {-noargs-}
{fsm properties} {The fsm properties command returns information about all recognized finite state machines.} {<fsm_instance>}
{fsm view} {The fsm view command displays a specified finite state machine in the FSM List window} {<fsm_instance>}
{gc configure} {The gc config command specifies when the simulator runs the class object garbage collector.} {[-onrun 0 | 1] [-onstep 0 | 1] [-threshold <n>]}
{gc run} {The gc run command marks all unreferenced class objects then deletes them.} { -noargs- }
{gdb dir} {The gdb dir command sets the source directory search path for the C debugger.} {[<src_directory_path_1> ...]}
getactivecursortime {The getactivecursortime command gets the time of the active cursor in the Wave window.} {[-window <wname>]}
getactivemarkertime {The getactivemarkertime command gets the time of the active marker in the List window.} {[-window <wname>] [-delta]}
help {The help command displays in the Transcript pane a brief description and syntax for the specified command.} {[<command> | <topic>]}
history {The history command lists the commands you have executed during the current session. History is a Tcl command. For more information, consult the Tcl Man Pages (Help > Tcl Man Pages).} {[clear] [keep <value>]}
jobspy {The jobspy command controls JobSpy, a tool for monitoring and controlling batch simulations and simulation farms.} {-gui | -startd | -killd | jobs | status | <jobid> <command>}
layout {The layout command loads, saves, lists, or deletes custom GUI layouts. Consult the Reference manual for layout command syntax.} { -noargs- }
lecho {The lecho command takes one or more Tcl lists as arguments and pretty-prints them to the Transcript pane.} {<args> ...}
left {The left command searches left (previous) for signal transitions or values in the specified Wave window.} {[-expr {<expression>}] [-falling] [<n>] [-rising] [-value <sig_value> [-noglitch]] [-window <wname>] }
log {The log command creates a wave log format (WLF) file containing simulation data for all HDL objects whose names match the provided specifications. Some objects are filtered automatically. Refer to the WildcardFilter preference variable in the Reference Manual.} {-flush <object> | {[-class <classtype>] [-filter <f> | -nofilter <f>] [-howmany] {[-in] [-inout] [-out] | [-ports]} [-internal] [-mvcall] [-mvcovm] [-mvcreccomplete] [-optcells] [-recursive [-depth <level>]] <object_name> ...}}
lshift {The lshift command takes a Tcl list as an argument and shifts it in-place, one place to the left, eliminating the left-most element.} {<list> [<amount>]}
lsublist {The lsublist command returns a sublist of the specified Tcl list that matches the specified Tcl glob pattern.} {<list> <pattern>}
{mem compare} {The mem compare command compares selected memory to reference memory or file.} {{[-mem <ref_mem>] | [-file <ref_file>]} [actual_mem]} 
{mem display} {The mem display command prints to the Transcript pane the memory contents of the specified instance. As a shorthand, if the given instance path contains only a single array signal or variable, the signal or variable name need not be specified.} {[-addressradix [d|h]] [-compress] [-dataradix <radix_type>] [-endaddress <end>] [-format [bin | hex | mti]] [-noaddress] [-startaddress <st>] [-wordsperline <n>] [<path>]} 
{mem list} {The mem list command displays a flattened list of all memory instances in the current or specified context after a design has been elaborated.} {[-r] [<path>]}
{mem load} {The mem load command updates the simulation memory contents of a specified instance. You can upload contents either from a memory data file, a memory pattern, or both. If both are specified, the pattern is applied only to memory locations not contained in the file.} {{-infile <infile> | -filldata <data_word> [-infile <infile>]} [-endaddress <end>] [-fillradix <radix_type>] [-filltype {dec | inc | rand | value}] [-format [bin | hex | mti]] [<path>] [-skip <Nwords>] [-startaddress <st>] [-truncate]} 
{mem save} {The mem save command saves the contents of a memory instance to a file in any of the supported formats: Verilog binary, Verilog hex, and MTI memory pattern data.} {-outfile <filename> [-addressradix {dec | hex}] [-dataradix <radix_type>] [-format {bin | hex | mti}] [-compress | -noaddress] [<path>] [-startaddress <st> -endaddress <end>] [-wordsperline <Nwords>]} 
{mem search} {The mem search command finds and prints to the screen the first occurring match of a specified memory pattern in the specified memory instance. Shorthand instance names are accepted.} {{-glob <word>[<word>...] | -regexp <word>[<word>...]} [-addressradix <radix>] [-dataradix <radix_type>] [-all] [-replace <word>[ <word>...]] [-startaddress <address>] [-endaddress <address>] [<path>] } 
next {The next command continues a search after you have invoked the search command.} {<window_name> [-window <wname>]}
noforce {The noforce command removes the effect of any active force commands on the selected HDL objects.} {<object_name> ...}
nolog {The nolog command suspends writing of data to the wave log format (WLF) file for the specified signals.} {[-all] [-depth <level>] [-howmany] [-in] [-inout] [-internal] [-out] [-ports] [-recursive] [-reset] [<object_name>...]}
notepad {The notepad command opens a simple text editor. It may be used to view and edit ASCII files or create new files.} {[<filename>] [-r | -edit]}
noview {The noview command closes a window/pane in the Questa GUI. To open a window/pane, use the view command.} {<window_name>...}
nowhen {The nowhen command deactivates selected when commands.} {[<label>]}
onbreak {The onbreak command is used within a macro, which must be followed by a run command to take effect. It specifies one or more commands to be executed when running a macro that encounters a breakpoint in the source code.} {<script> ; <script> ...}
onElabError {The onElabError command specifies one or more commands to be executed when an error is encountered during vsim elaboration. The command is used by placing it within a macro.} {{[<command> [; <command>] ...]}}
onerror {The onerror command is used within a macro, placed before a run command; it specifies one or more commands to be executed when a running macro encounters an error. The onerror command is executed when a Tcl command encounters an error in the macro file that contains the onerror command (note that a run command does not necessarily need to be in process).} {{[<command> [; <command>] ...]}}
onfinish {The onfinish command controls the simulator's behavior when encountering a \$finish or sc_stop() in the design code} {ask | exit | final | stop | default}
{pa autotestplan} {The pa autotestplan command creates a test plan file based on coverage information in your power aware simulation.} {[-format={xml | ucdb}] [-filename=<filename>]} 
{pa msg} {The pa msg command controls whether to display or suppress messages for Power Aware dynamic checking during simulation run time. You can specify individual messages to be displayed or suppressed by message ID number.} {[-all] {-enable | -disable} [-severity {note | warning | error | fail}] [-glitch_window <real> < time_spec>] [-stopafter <integer>] [-pa_checks=<check_value>] [-ports <port_list>] [-scope <string>] [-strategy <string>] [-domain <string>] [<message_num>...]} 
{pa report} {The pa report command writes power aware reports to the current directory.} {-noargs-} 
pause {The pause command placed within a macro interrupts the execution of that macro.} {-noargs-}
pop {The pop command moves the specified number of call frames up the C callstack.} {<#_of_levels>}
{power add} {The power add command specifies the signals or nets to track for power information.} {[[-in] [-out] [-inout] | [-ports]] [-internal] [-nocellnet] [-r] <signals_nets> ...}
{power off} {Use the power off command in conjunction with the power add command to make vsim stop updating toggle activity data for the specified signal or net.} {[-all] [[-in] [-out] [-inout] | [-ports]] [-internal] [-r] <signals_nets> ...}
{power on} {Use the power on command in conjunction with the power add command to make vsim resume updating toggle activity data for the specified signal or net.} {[-all] [[-in] [-out] [-inout] | [-ports]] [-internal] [-r] <signals_nets> ...}
{power report} {The power report command reports power information for the specified signals or nets.} {[-all] [-noheader] [-file <filename>] [-bsaif <filename>]}
{power reset} {The power reset command selectively resets power information to zero for the signals or nets specified with the power add command.} {[-all] [[-in] [-out] [-inout] | [-ports]] [-internal] [-r] <signals_nets> ...}
precision {The precision command determines how real numbers display in the graphic interface (e.g., Objects, Wave, Locals, and List windows). It does not affect the internal representation of a real number and therefore precision values over 17 are not allowed.} {[<digits>[#]]}
printenv {The printenv command prints to the Transcript pane the current names and values of all environment variables.} {[<var>...]}
{process report} {The process report command creates a textual report of all processes displayed in the Process window.} {[-file <filename>] [-append]}
{profile clear} {The profile clear command clears any performance data that has been gathered during previous run commands.} {-noargs-}
{profile interval} {The profile interval command selects the frequency with which the profiler collects samples during a run command. To use this command, first enable profiling with the profile on command.} {[<sample_frequency>]}
{profile off} {The profile off command disables runtime memory allocation and statistical performance profiling.} {[-p]}
{profile on} {The profile on command enables runtime memory allocation and statistical performance profiling.} {[-p] [-name <session>]}
{profile open} {The profile open command opens a previously saved profile database.} {<filename>}
{profile option} {The profile option command changes how profiling data are reported. The command acts like a toggle: invoking it once turns on the option; invoking it a second time turns the option back off.} {{collapse_sections | collect_calltrees} [on | off | status] }
{profile report} {The profile report command outputs profiling data that have been gathered up to the point that you execute the command.} {{[-callercallee <func> | -calltree | -cutoff <percentage>] | -du [<du_name>] [-showcalls] | -file <filename> | -functoinst <func> | -instofdef <inst> [-inclusiveDuMatch 0|1]] | -m | -onexit | -p | -ranked | -structural [-level <positive_integer>] [<rootname>] [-showcalls]] [-solver]}}
{profile save} {The profile save command saves profile database.} {{[-onexit] <filename> | -onexitstatus}}
{profile status} {The profile status command returns "On" or "Off" for the specified argument.} {[-p | -m | -assertions | -classes | -cvg | -qdas | -solver]} 
{profile summary} {This command outputs profiling data that is broken into categories based on context in which the callstacks are found.} {[-file <filename>] [-header] [-noheader] [-tcl]}
project {The project command is used to perform common operations on projects. Some of the project commands must be used outside of a simulation session.} {[addfile <filename> [<file_type>] [<folder_name>]] | [addfolder <foldername> [<folder_parent>]] | [calculateorder] | [close] | [compileall [-n]] | [compileorder] | [compileoutofdate [-n]] | [delete <filename>] | [filenames] | [env] | [history] | [new <home_dir> <proj_name> [<defaultlibrary>] [<initialini>] [0 | 1]] | [open <project>] | [removefile <filename>]}
{property list} {The property list command changes one or more properties of the specified signal, net, or register in the List window.} {[-window <wname>] [-label <label>] [-radix <type>] [-radixenumnumeric | -radixenumsymbolic] [-trigger {1 | 0}] [-width <number>] {<pattern>}}
{property wave} {The property wave command changes one or more properties of the specified signal, net, or register in the Wave window.} {[-window <wname>] [-color <color>] [-format {analog | literal |logic}] [-height <number>] [-offset <number>] [-radix <type>] [-radixenumnumeric | -radixenumsymbolic] [-scale <n>] <pattern>}
push {The push command moves the specified number of call frames down the C callstack.} {<#_of_levels>}
pwd {The Tcl pwd command displays the current directory path in the Transcript pane.} {-noargs-}
questasim {The questasim command starts the QuestaSim GUI without prompting you to load a design.} {[-do <macrofile>] [<license_option>]}
quietly {The quietly command turns off transcript echoing for the specified command.} {<command>}
quit {The quit command exits the simulator.} {[-f | -force] [-sim] [-code <integer>]}
qverilog {The qverilog command compiles, optimizes, and simulates Verilog and SystemVerilog designs in a single step.} {[<vlog_and_vopt_options>] [-ccflags "opts"] [-dofile <dofile> [-gui] [-i] [-l <logfile>] <filename> [-ldflags "opts"] [-R <vsim_options>] [-stats[=[+ | -]<feature>[,[+ | -]<mode>]]] [-work <library_name>]} 
radix {The radix command specifies the default radix to be used for the current simulation.} {[-binary | -octal | -decimal | -hexadecimal | -unsigned | -ascii | -time] [-enumnumeric | -enumsymbolic | -showbase | -symbolic]}
{radix define} {The radix define command is used to create or modify a user-defined radix.} {<name> [[-fixed [-signed] | -float] -fraction <n>] [-base <base>] [-precision <p>]}
{radix delete} {The radix delete command will remove the radix definition from the named radix.} {<name>}
{radix list} {The radix list command will return the complete definition of a radix, if a name is given. If no name is given, it will list all the defined radicies.} {[<name>]}
{radix names} {The radix names command returns a list of currently defined radix names.} {-noargs-}
{radix signal} {The radix signal command sets or inspects radix values for the specified signal in the Objects, Locals, and Wave windows.} {[<signal_name> [<radix_value>]] [-fpoint <decimal>] [-showbase]}
readers {The readers command displays the names of all readers of the specified object.} {<object_name> [-source]}
report {The report command displays information relevant to the current simulation.} {files | where [ini] [pwd] [transcript] [wlf] [project] | simulator control | simulator state}
restart {The restart command reloads the design elements and resets the simulation time to zero. Only design elements that have changed are reloaded. (Note that SDF files are always reread during a restart.)} {[-force] [-nobreakpoint] [-nolist] [-nolog] [-nowave] [-noassertions] [-nofcovers] [-sv_seed <seed_value> | random]}
restore {The restore command restores the state of a simulation that was saved with a checkpoint command during the current invocation of VSIM (called a "warm restore").} {<filename>}
resume {The resume command is used to resume execution of a macro file after a pause command or a breakpoint.} {-noargs-}
right {The right command searches right (next) for signal transitions or values in the specified Wave window.} {[-expr {<expression>}] [-falling] [-noglitch] [-rising] [-value <sig_value>] [-window <wname>] [<n>]}
run {The run command advances the simulation by the specified number of timesteps.} {{[<timesteps>[<time_units>]] | -all | -continue | -final | -finish | -init | -next | -over [<n>]} | {-step [<n>] [-current] [-out] [-over [<n>]] [-this "this ==<class_handle>]}}
runStatus {The runStatus returns the current state of your simulation after issuing a run or step command.} {[-full]}
sccom {The sccom command is actually two commands in one: sccom interacts with a C/C++ compiler to compile SystemC source code into the work library, and sccom -link takes the compiled source code and links the design. Type 'sccom -help' for complete syntax.} {-noargs-}
scgenmod {Once a Verilog or VHDL module is compiled into a library, you can use the scgenmod command to write its equivalent SystemC foreign module declaration to standard output.} {[-help] [-lib <library_name>] [-map "<hdl_type>=<sc_type>"] [-modelsimini <ini_filepath>] [-createtemplate] [-preservevhdlcase] <module_name>}
sdfcom {The sdfcom command compiles the specified SDF file. Compiled SDF files can dramatically improve performance in cases where the same SDF file is used for multiple simulation runs.} {[-delayscale <value>] [-maxdelays] [-mindelays] [-nocompress] [-typdelays] <source_file> <output_file>}
search {The search command searches the specified window for one or more objects matching the specified pattern(s). The search can be continued using the next command.} {<window_name> [-window <wname>] [-all] [-field <n>] [-toggle] [-forward | -backward] [-wrap | -nowrap] [-exact] [-regexp] [-nocase] [-count <n>] <pattern>}
searchlog {The searchlog command searches one or more of the currently open logfiles for a specified condition.} {[-command <cmd>] [-count <n>] [-deltas] [-endtime <time> [<unit>]] [-env <path>] [-event] [-expr {<expr>}] [-reverse] [-rising | -falling | -anyedge] [-startDelta <num>] [-value <string>] {<startTime> [<unit>]} <pattern>}
see {The see command displays the specified number of source file lines around the current execution line.} {[<n> | <pre> <post>]}
seetime {The seetime command scrolls the List or Wave window to make the specified time visible.} {{list [-delta <num>] | wave} [-window <wname>] [-select] [-event] {<time> [<unit>]}}
setenv {The setenv command changes or reports the current value of an environment variable. The setting is not persistent - it is valid only for the current Questa session.} {<varname> [<value>]}
shift {The shift command shifts macro parameter values left one place, so that the value of parameter \$2 is assigned to parameter \$1, the value of parameter \$3 is assigned to \$2, etc. The previous value of \$1 is discarded.} {-noargs-}
show {The show command lists HDL objects and subregions visible from the current environment.} {[-all] [<pathname>]}
simstats {The simstats command returns performance-related statistics about elaboration and simulation. The statistics measure the simulation kernal process (vsimk) for a single invocation of vsim. If you invoke vsim a second time, or restart the simulation, the current statistics are discarded and new values are collected.} {[covsavecpu | covsavetime | elabcpu | elabmemory | elabtime | logcpu | logtime | simcpu | simmemory | simtime | tclcmdcpu | tclcmdtime | totalcpu | totaltime | voptcpu | voptmemory | vopttime]}
simstatslist {The simstatslist command returns performance-related statistics about elaboration and simulation. Use this command in place of the simstats command to produce the original statistics output format.} {[covsavecpu | covsavetime | elabcpu | elabmemory | elabtime | logcpu | logtime | simcpu | simmemory | simtime | tclcmdcpu | tclcmdtime | totalcpu | totaltime | voptcpu | voptmemory | vopttime]}
{stack down} {The stack down command moves down the call stack.} {[n]} 
{stack frame} {The stack frame command selects the specified call frame.} {<n>}
{stack level} {The stack level command reports the current call frame number.} {-noargs-}
{stack tb} {The stack tb command is an alias for the tb command.} {-noargs-}
{stack up} {The stack up command moves up the call stack.} {[n]} 
status {The status command lists summary information about currently interrupted macros.} {[file | line]}
step {The step command steps to the next HDL or C statement. Current values of local HDL variables may be observed at this time using the Locals window.} {[<n>] [-current] [-out] [-over [<n>]] [-this "this==<class_handle>"]}
stop {The stop command is used with the when command to stop simulation in batch files.} {[-sync]}
suppress {The suppress command prevents the specified message(s) from displaying.} {[-clear <msg_number>[,<msg_number>,...]] [<msg_number>[,<msg_number>,...]] [<code_string>[, <code_string>, ...]}
tb {The tb (traceback) command displays a stack trace for the current process in the Transcript pane. This lists the sequence of HDL function calls that have been entered to arrive at the current state for the active process.} {[<#_of_levels>]} 
tcheck_set {The tcheck_set command works in tandem with tcheck_status to report on and enable/disable individual timing checks. tcheck_set modifies either a check's reporting or X-generation status and reports the new setting in the Transcript pane.} {[-quiet] <instance> [{-m | -n | -p}] [-r [-v]] [<tcheck> | ALL] [<Stat> | <MsgStat> <XStat>]}
tcheck_status {The tcheck_status command works in tandem with tcheck_set to report on and enable/disable individual timing checks. tcheck_status prints in the Transcript pane the current status of all timing checks in the instance or a specific timing check specified with the optional <tcheck> argument.} {[-lines] [-m] [-n] [-r] <instance> [<tcheck>]}
eqTime {Returns a 1 (true) or 0 (false) if <time1> and <time2> are equal.} {<time1>[unit] <time2>[unit]}
neqTime {Returns a 1 (true) or 0 (false) if <time1> and <time2> are not equal.} { <time1>[unit] <time2>[unit]}
ltTime {Returns a 1 (true) or 0 (false) if <time1> is less than <time2>.} {<time1>[unit] <time2>[unit]}
gtTime {Returns a 1 (true) or 0 (false) if <time1> is greater than <time2>.} {<time1>[unit] <time2>[unit]}
lteTime {Returns a 1 (true) or 0 (false) if <time1> is less than or equal to <time2>.} {<time1>[unit] <time2>[unit]}
gteTime {Returns a 1 (true) or 0 (false) if <time1> is greater than or equal to <time2>.} {<time1>[unit] <time2>[unit]}
addTime {Returns the value of adding <time1> to <time2>} {<time1>[unit] <time2>[unit]}
subTime {Returns the value of subtracting <time2> from <time1>} {<time1>[unit] <time2>[unit]}
mulTime {Returns the value of multiplying <time1> by an <integer>} {<time1>[unit] <integer>}
divTime {Returns an integer, which is the value of dividing <time1> by <time2>} {<time1>[unit] <time2>[unit]}
intToTime {Returns a 64-bit time value based on two 32-bit parts of a 64-bit integer} {<high_32bit_int> <low_32bit_int>}
scaleTime {Returns a time value scaled by a real number and truncated to the current time resolution.} { <time1>[unit] <scale_factor>}
RealToTime {Returns a time value equivalent to the specified real number and truncated to the current time resolution.} {<real>}
validTime {Returns a 1 (true) or 0 (false) if the given string is a valid time for use with any of the Time calculations.} {<time>}
formatTime {Sets display properties for time values.} {{{+|-} commas} | {{+|-} nodefunit} | {{+| -} bestunits}}
{toggle add} {The toggle add command enables collection of toggle statistics for the specified nodes.} {[-exclude {<list>}] [-countlimit <int>] [-extendedtogglemode 1|2|3] [-full] [-in] [-inout] [-internal] [-out] [-ports] [-r] [-unique] [-widthlimit] <node_name>} 
{toggle disable} {The toggle disable command disables toggle statistics collection on the specified nodes. The command provides a method of implementing coverage exclusions for toggle coverage.} {[-all] | [-in] [-out] [-inout] [-internal] [-ports] [-r] <node_name>}
{toggle enable} {The toggle enable command re-enables toggle statistics collection on nodes whose toggle coverage had previously been disabled via the toggle disable command.} {[-all] | [-in] [-out] [-inout] [-internal] [-ports] [-r] <node_name>}
{toggle report} {The toggle report command displays a list of all unique nodes that have not transitioned to both 0 and 1 at least once, and the counts for how many times each node toggled for each state transition type.} {[-all] [-duplicates] [-file <filename>] [-select {inputs | outputs | inout | ports | internals}] [-instance <path> [-recursive]] [-onexit] [<signal>...] [-showambiguity] [-summary] [-top] [-verbose]}
{toggle reset} {The toggle reset command resets the toggle counts to zero for the specified nodes.} {[-all] | [-in] [-out] [-inout] [-internal] [-ports] [-r] <node_name>}
{tr color} {The tr color command sets the color scheme of individual transactions and entire transaction streams, for a specific wave window or all wave windows.} {{-stream <stream> [<stream>]... | -transaction <uid> [<uid>]...} [-attrbg <color>] [-attrtext <color>] [-border <color>] [-color <color>] [-default] [-get] [-inactive <color>] [-namebg <color>] [-nametext <color>] [-win <wave>]}
{tr uid} {The tr uid command returns a list of UIDs (dataset name and transaction serial number) for active transactions during a specified time span on the specified streams.} {[-start <time> -end <time> <stream>...] | [-time <time> <stream>...] | [<stream>...]}
{tr order} {The tr order command controls which attributes are visible in a transaction and the order in which they appear.} { [[-attributes <attrs>] [-default] [-win <wave>] <stream>... ]] | {[-hidden] [-visible] [-win <wave>] {<stream>...}] }}
transcribe {The transcribe command displays a command in the Transcript pane, and then executes the command.} {<command>}
transcript {The transcript command controls echoing of commands executed in a macro file.} {[on | off | -q | quietly]}
{transcript file} {The transcript file command sets or queries the pathname for the transcript file. You can use this command to clear a transcript in batch mode or to limit the size of a transcript file. It offers an alternative to setting the PrefMain(file) Tcl preference variable.} {[<filename>]}
{transcript path} {Returns the rull pathname for the current transcript file.} {-noargs-}
{transcript sizelimit} {The transcript sizelimit command sets the size limit, in KB for the transcript file.} {[<size>]}
{triage dbfile} {The triage dbfile command creates a database (.tdb) of all messages from either a UCDB, a WLF file, or a LOG file. Type 'triage dbfile -help' for complete syntax.} {-noargs-} 
{triage dbinsert} {The triage dbinsert command places one or more messages directly into a triage database (TDB) file.} {[-verbose] [-debug] [-name <tdb_filename>] [-nowrite] [-rulesfile <rilesfilename> [-rulesfile <rilesfilename2>]] [-setseverity <string>] [-settime <int_time>] [-severity {I|F|E|W|N}] [-severityAll] [-testname <testname>] {<message> [<message>]...}}
{triage dbrefresh} {The triage dbrefresh command clears the old triage database, and re-creates the database using a saved history of previous triage dbfile commands.} {[-name <tdb_filename>] [-verbose]}
{triage query} {The triage query command provides programmatic access to the contents of the triage database (TDB) for debug and scripting purposes. The command has two forms: with and without -statement} {[-help] {-statement <query_string> [-elapsed]} | {[-name <tdb_filename>] {-analyze | [ [elapsed] | [-files] [[-unique | -verbose] [-attributes] [-fields] [-history] [-messages] [-tests] [-properties]]}}}
{triage report} {The triage report command reads in a triage database (.tdb) and prints out a text report, after applying specified filters. } {[-verbose] [-name <tdb_filename>] [-append] [-file <outputfilename>] {[-teststatus [F|E|W|P|M|S]] [-teststatusAll] [-severity [F|E|I|W|N]] [-severityAll] [-message <globstr>] [-excludemsg <globstr>]} {[-nummsg <int>] [-concise [T|F] [-notruncation] [-details [M|A|T|U]] [-detailsAll]}}
{triage view} {The triage view command reads a triage database (.tdb) into the Verification Results Analysis window.} {[-name <tdb_filename>] {[-collayout <name>] [-filterexp <name>] [-hierconfig <name>] [-question <name>] [-sortconfig <config_name>]}}
tssi2mti {The tssi2mti command is used to convert a vector file in Fluence Technology (formerly TSSI) Standard Events Format into a sequence of force and run commands.} {<signal_definition_file> [<sef_vector_file>]}
typespec {The typespec command queries class names and class relationships of SystemVerilog classes.} {<pattern> [-dataset <value>] [-isa <value>] [-class <value> | -ancestry <value>] [-exact] [-regexp] [-tcl] [-indent <value>]}
ui_VVMode {The ui_VVMode command specifies the product's behavior when encountering UI registration calls used by verification packages.} {[full | logclass | logobj | nolog | off]}
unsetenv {The unsetenv command deletes an environment variable. The deletion is not permanent - it is valid only for the current Questa session.} {<varname>}
up {The up command searches for object transitions or values in the specified List window.} {[-expr {<expression>}] [-falling] [-noglitch] [-rising] [-value <sig_value>] [-window <wname>] [<n>]}
{uvm call} {The uvm call command calls UVM functions.} {<function_name> {<arg1> [<arg2>] ?[<argN>]}}
{uvm configtracing} {The uvm configtracing command enables printing of configuration database reads and writes as they occur.} {0|1}
{uvm displayobjections} {The uvm displayobjections command displays the current objections for a specified UVM object or the uvm_top.} {[<uvm_object_path>]}
{uvm findregisters} {The uvm findregisters command prints the HDL registers attached to the UVM register models in a design.} {[-acc] <uvm_reg_block_path>}
{uvm findsequences} {The uvm findsequences command prints the active UVM sequences.} {[<component_path>]}
{uvm handle} {The uvm handle command print simulation handle for a specified UVM class instance.} {<uvm_object_path>}
{uvm mapmode} {The uvm mapmode command sets the UVM path mapping mode to look for UVM style paths or simulator paths.} {[0 | 1]}
{uvm printconfig} {The uvm printconfig command print configuration information for a specified object.} {[<uvm_component_path> [<config_obj_name>]}
{uvm printfactory} {The uvm printfactory command prints global factory information.} {-noargs-}
{uvm printstreams} {The uvm printstreams command prints a list of transaction streams for a specified object.} {[<uvm_component_path>]...}
{uvm printtopology} {The uvm printtopology command prints the global testbench topology.} {-noargs-}
{uvm setverbosity} {The uvm setverbosity command sets the global reporting verbosity.} {<uvm_report_verbosity_level> [<uvm_component_path>]}
{uvm simpath} {The uvm simpath command maps the path of a UVM hierarchical component to a simulator /uvm_root context hierarcy string.} {<uvm_component_path>}
{uvm traceobjections} {The uvm traceobjections command enables and disables objections tracing for a component instance.} {<uvm_component_path> [0|1]}
{uvm uvmpath} {The uvm uvmpath command maps the path of a UVM component from simulator hierarchy to a UVM full name.} {<questa_uvm_component_path>}
{vcd add} {The vcd add command adds the specified objects to a VCD file.} { [-dumpports] [-file <filename>] [[-in] [-out] [-inout] | [-ports]] [-internal] [-r | -r -optcells] <object_name>...}
{vcd checkpoint} {The vcd checkpoint command dumps the current values of all VCD variables to the specified VCD file. While simulating, only value changes are dumped.} {[<filename>]}
{vcd comment} {The vcd comment command inserts the specified comment in the specified VCD file.} {<comment string> [<filename>]}
{vcd dumpports} {The vcd dumpports command creates a VCD file that includes port driver data.} {[-compress] [-direction] [-file <filename>] [-force_direction] [-in] [-inout] [-out] [-no_strength_range] [-unique] [-vcdstim] <object_name> ...}
{vcd dumpportsall} {The vcd dumpportsall command creates a checkpoint in the VCD file which shows the value of all selected ports at that time in the simulation, regardless of whether the port values have changed since the last timestep.} {[<filename>]}
{vcd dumpportsflush} {The vcd dumpportsflush command flushes the contents of the VCD file buffer to the specified VCD file.} {[<filename>]}
{vcd dumpportslimit} {The vcd dumpportslimit command specifies the maximum size of the VCD file (by default, limited to available disk space). When the size of the file exceeds the limit, a comment is appended to the file and VCD dumping is disabled.} {<dumplimit> [<filename>]}
{vcd dumpportsoff} {The vcd dumpportsoff command turns off VCD dumping and records all dumped port values as x.} {[<filename>]}
{vcd dumpportson} {The vcd dumpportson command turns on VCD dumping and records the current values of all selected ports. This command is typically used to resume dumping after invoking vcd dumpportsoff.} {[<filename>]}
{vcd file} {The vcd file command specifies the filename and state mapping for the VCD file created by a vcd add command.} {[-dumpports] [-direction] [<filename>] [-map <mapping pairs>] [-no_strength_range] [-nomap] [-unique]}
{vcd files} {The vcd files command specifies a filename and state mapping for a VCD file created by a vcd add command.} {[-compress] [-direction] <filename> [-map <mapping pairs>] [-no_strength_range] [-nomap] [-unique]}
{vcd flush} {The vcd flush command flushes the contents of the VCD file buffer to the specified VCD file. This command is useful if you want to create a complete VCD file without ending your current simulation.} { [<filename>]}
{vcd limit} {The vcd limit command specifies the maximum size of a VCD file (by default, limited to available disk space).} {<filesize> [<filename>]}
{vcd off} {The vcd off command turns off VCD dumping to the specified file and records all VCD variable values as x.} { [<filename>]}
{vcd on} {The vcd on command turns on VCD dumping to the specified file and records the current values of all VCD variables.} { [<filename>]}
vcd2wlf {vcd2wlf is a utility that translates a VCD (Value Change Dump) file into a WLF file that can be displayed in Questa using the vsim -view argument.} {[-splitio] [-splitio_in_ext <extension>] [-splitio_out_ext <extension>] [-nocase] {<vcd filename> | - } <wlf filename>}
vcom {The vcom command compiles VHDL source code into a specified working library (or to the work library by default). Type 'vcom -help' for complete syntax.} {-noargs-}
{vcover attribute} {The vcover attribute command is used to display or set attributes in the currently loaded database, during batch mode simulation.} {{<ucdb_file> [-test <testname>] [-tcl] [-32 | -64] [-concise] [-help | -h] [-modelsimini <ini_filepath>] [-name <attribute>...] [-[w]prof=<filename>] [-proftick=<integer>] [-stats [=[+|-]<feature>[,[+|-]<mode>]]] [-suppress <msg_number>[, <msg_number>, ...]] [-warning <msg_number>[, <msg_number>, ...]] [-error <msg_number>[, <msg_number>, ...]] [-note <msg_number>[, <msg_number>, ...]]} | {-ucdb [-name <attribute>...] <ucdb_file>}}
{vcover diff} {The vcover diff command produces and prints to stdout a textual description of the differences between the UCDB file. It also can create a triage database which can be opened within the Verification Management Results Analysis window of the GUI.} {<UCDB1> <UCDB2> [-32 | -64] [-append] [-debug] [-delimiter] [-diffsfile] [-gui] [-memblk] [-flagfield] [-help | -h] [-nocomments] [-nocounts] [-notdb] [-[w]prof=<filename>] [-proftick=<integer>] [-rulesfile <rulesfile>] [-scope <path/scope>] [-stats [=[+|-]<feature>[,[+|-]<mode>]]] [-structural] [-testname] [-tdb <name>] [<UCDB1>] [-verbose] }
{vcover dump} {The vcover dump command produces and prints to stdout a textual description of the contents of the UCDB file.} {<ucdb_file> [<ucdb_file>] [-file <dump_text_file>] [-canonical] [-help | -h] [-suppress <msg_number>[, <msg_number>, ...]] [-error <msg_number>[, <msg_number>, ...]] [-note <msg_number>[, <msg_number>, ...]] [-stats [=[+|-]<feature>[,[+|-]<mode>]]] [-[w]prof=<filename>] [-proftick=<integer>] [-warning <msg_number>[, <msg_number>, ...]]}
{vcover history} {The vcover history command queries a specified single UCDB, a merged UCDB, or a Trend UCDB and displays a list of all commands which created it.} {[-32 | -64] [-full] [-display | -nodisplay ( test | merge | testplan )]* [-[w]prof=<filename>] [-proftick=<integer>] [-stats [=[+|-]<feature>[,[+|-]<mode>]]] [-help | -h] }
{vcover merge} {The vcover merge command merges multiple code or functional coverage data files that were created with the coverage save command or the fcover save command, respectively. The command adjusts its functionality to the type of coverage files (functional coverage or code coverage) given on its command line.} {[-32 | -64] [-and] [-append] [-backup] [-date <yymmddhhmmss>] [-inputs <file>] [-install <path>] [[-instance <path> [-recursive] | -du <du_name> [-recursive] [-du [-recursive]]...] [-ignoredusig] [-help | -h] [-lockingfull | -lockingtimeout | -lockingnone] [-log <filename> | -l <filename] [-master <ucdb_filename>] [-modelsimini <ini_filepath>] [-notagging] [-[w]prof=<filename>] [-proftick=<integer>] [-quiet] [-showambiguity] [-stats [=[+|-]<feature>[,[+|-]<mode>]]] [-strip <n>] [-verbose] [-version] [-combine | -combinemax | -combinemin | -totals | -testassociated ] [-timeout <seconds>] {<file1> [<file2> ...<filen>]} [-trend [-output] <trend_ucdb_output> <ucdb_input1> ... <ucdb_inputN>] [-error <msg_number>[,<msg_number>,...]] [-note <msg_number>[,<msg_number>,...]] [-suppress <msg_number>[,<msg_number>,...]] [-warning <msg_number>[,<msg_number>,...]] {[-out] <outfile> <file1> [<file2> ...<filen>]]}}
{vcover parallelmerge} {The vcover parallelmerge command performs a merge on a UCDB or CoverStore database using parallel processes. It automatically merges any intermediate merge results, and produces final merged results.} {<options>= [-covmode <ucdb/covstore> ] [-filelist <filepath>] [-genlist] [-genlistfrom <pathdir_or_list>] [-gridopts <options>] [-gridslots <val>] [-hostlist <pattern>] [-j <val>] [-mergetype <totals/testassociated/preservetestcounts>] [-mergeopts <options>] [-mtimeout <val>] [-outname <name>] [-qtimeout <val>] [-rmdb <path>] [-runmode <local/rsh/lsf/sge>][ -teststatus <all/passed/failed>] [-dbname <file_pattern>] [-verbose]}
{vcover ranktest} {The vcover ranktest command ranks the specified input UCDB files according to their contribution to cumulative coverage.} {{<UCDB_inputfile1> [... <UCDB_inputfileN>]} [-32 | -64] [-algorithm {greedy | quick}] [-assertion] [-code {b | c | e | f | s | t}...] [-codeAll] [-cvg] [-directive] [-nocompulsoryordering | -compulsorysorting | -compulsoryranking] [-error <msg_number>[,<msg_number>,?]] [-fewest | -cputime | -simtime [-goal [<coverage_type>] <percentage>]] [-help | -h] [-inputs <file_list>] [-log <filename> | -l <filename>] [-maxcpu <real_num_in_seconds>] [-maxtests <int>] [-metric {aggregate | total}] [-note <msg_number>[,<msg_number>,?]] [-path <path> | -du <du_name> | -plansection <path>] [-precision <int_num>] [-[w]prof=<filename>] [-proftick=<integer>] [-quiet | -concise | -verbose] [-rankfile <filename>] [-stats [=[+|-]<feature>[,[+|-]<mode>]]] [-suppress <msg_number>[,<msg_number>,?]] [-warning <msg_number>[,<msg_number>,?]] [-weight <coverage_type> <integer>] [-iterative | -testassociated] [-keepmergefile <filepath>] [-modelsimini <ini_filepath>]}
{vcover report} {The vcover report command produces textual output of coverage statistics from a previously saved code or functional coverage run. This allows you to produce reports in an "offline" manner (i.e., without having to load a simulation.) Type 'vcover report -help' for complete syntax.} {-noargs-}
{vcover stats} {The vcover stats command computes and prints to stdout summary statistics for previously saved code or functional coverage databases. It can be invoked within the Questa GUI or at the command line.} {[-32 | -64] [-assert] [-cvg] [-directive] [-code {b|c|e|s|t|f}...] [-codeAll] [-help | -h] [-nofec] [-noudp] [-inputs <pathname>] [-precision <int>] [-memory] [-modelsimini <ini_filepath>] [-nomissing] [-[w]prof=<filename>] [-proftick=<integer>] [-stats [=[+|-]<feature>[,[+|-]<mode>]]] [{-error | -note | -suppress | -warning | -fatal} <msg_number>[,<msg_number>,...]] <file1> [<file2> <filen>...]}
{vcover testnames} {The vcover testnames command displays the testnames in the currently loaded UCDB file. If it is a merged file, it gives you a list of tests in the merged file.} {<file> [-32 | -64] [-tcl] [-modelsimini <ini_filepath>] [-error <msg_number>[,<msg_number>,?]] [-help | -h] [-stats [=[+|-]<feature>[,[+|-]<mode>]]] [-[w]prof=<filename>] [-proftick=<integer>] [-note <msg_number>[,<msg_number>,?]] [-suppress <msg_number>[,<msg_number>,?]] [-warning <msg_number>[,<msg_number>,?]] }
vdbg {The vdbg command performs pre-simulation debug analysis of sequential and combinatorial design elements. Results are added to the optimized design unit for later causality analysis and schematic representation. } {[-libertyfiles=<file_name>] [-work <library_name>] <opt_dut_name>}
vdel {The vdel command deletes a design unit from a specified library.} {[-lib <library_path>] [-modelsimini <ini_filepath>] [-verbose] {-all | <primary> [<arch_name>] | -allsystemc | -obj [compiler | platform | platform_compiler | all] | -dpiobj [compiler | platform | platform_compiler | all]}}
vdir {The vdir command lists the contents of a design library.} {[-l | [-prop <prop>]] [-r] [-obj] [-all | [-lib <library_name>]] [<design_unit>] [-modelsimini <ini_filepath>]}
vencrypt {The vencrypt command encrypts Verilog and SystemVerilog code contained within encryption envelopes. The Verilog code is not pre-processed before encryption, so macros and other `directives are unchanged.} {<filename> [-d <dirname>] [-e <extension>] [-f <filename>] [-help | -h] [-hea <filename>] [-logfile <filename> | -l <filename>] [-o <filename>] [-p <prefix>] [-quiet] [-stats [=[+|-]<feature>[,[+|-]<mode>]]]}
verror {The verror command prints a detailed description about a message number. It may also point to additional documentation related to the error.} {{[-fmt|-full] {<msgNum> ...} | [-fmt |-full] [-kind <tool>] -all} | [-kind <tool>] {-pedanticerrors -permissive -suppressibleerrors}}
vgencomp {Once a Verilog module is compiled into a library, you can use the vgencomp command to write its equivalent VHDL component declaration to standard output.} {[-lib <library_name>] [-b] [-modelsimini <ini_filepath>] [-s] [-v] <module_name>}
vhencrypt {The vhencrypt command encrypts VHDL code contained within encryption envelopes.} {<filename> [-d <dirname>] [-e <extension>] [-f <filename>] [-help | -h] [-hea <filename>] [-logfile <filename> | -l <filename>] [-o <filename>] [-p <prefix>] [-quiet] [-stats [=[+|-]<feature>[,[+|-]<mode>]]]}
view {The view command displays a stand-alone window or Main window pane.} {<window_type>... [-aliases] [-names] [-new] [-title {New Window Title}] [-undock {[-icon] [-height <n>] [-width <n>] [-x <n>] [-y <n>]} | -dock]}
{virtual count} {The virtual count command counts the number of currently defined virtuals that were not read in using a macro file.} {[-kind {implicits | explicits}] [-unsaved]}
{virtual define} {The virtual define command prints to the Transcript pane the definition of the virtual signal or function in the form of a command that can be used to re-create the object.} {[-kind {implicits | explicits}] <pathname>}
{virtual delete} {The virtual delete command removes the matching virtuals.} {[-kind {implicits | explicits}] <pathname>}
{virtual describe} {The virtual describe command prints to the Transcript pane a complete description of the data type of one or more virtual signals.} {[-kind {implicits | explicits}] <pathname>}
{virtual expand} {The virtual expand command produces a list of all the non-virtual objects contained in the specified virtual signal(s).} {[-base] <pathname>...}
{virtual function} {The virtual function command creates a new signal, known only by the GUI (not the kernel), that consists of logical operations on existing signals and simulation time, as described in <expressionString>.} {[-env <path>] [-install <path>] [-delay <time> <unit>] {<expressionString>} <name>}
{virtual hide} {The virtual hide command causes the specified real or virtual signals to not be displayed in the Objects window. This is used when you want to replace an expanded bus with a user-defined bus.} {{[-kind {implicits | explicits}] | [-region <path>]} <pattern>}
{virtual log} {The virtual log command causes the simulation-mode dependent signals of the specified virtual signals to be logged by the kernel.} {{[-kind {implicits | explicits}] | [-region <path>]} [-recursive] [-only] [-in] [-out] [-inout] [-internal] [-ports] <pattern>}
{virtual nohide} {The virtual nohide command reverses the effect of a virtual hide command, causing the specified real or virtual signals to reappear the Objects window.} {{[-kind {implicits | explicits}] | [-region <path>]} <pattern>}
{virtual nolog} {The virtual nolog command reverses the effect of a virtual log command. It causes the simulation-dependent signals of the specified virtual signals to be excluded ("unlogged") by the kernel.} {{[-kind {implicits | explicits}] | [-region <path>]} [-recursive] [-only] [-in] [-out] [-inout] [-internal] [-ports] <pattern>}
{virtual region} {The virtual region command creates a new user-defined design hierarchy region.} {<parentPath> <regionName>}
{virtual save} {The virtual save command saves the definitions of virtuals to a file.} {[-kind {implicits | explicits}] [-append] [<filename>]}
{virtual show} {The virtual show command lists the full path names of all explicitly defined virtuals.} {[-kind {implicits | explicits}]}
{virtual signal} {The virtual signal command creates a new signal, known only by the GUI (not the kernel), that consists of concatenations of signals and subelements as specified in <expressionString>.} {[-env <path>] [-install <path>] [-delay <time> <unit>] {<expressionString>} <name>}
{virtual type} {The virtual type command creates a new enumerated type, known only by the GUI, not the kernel. Virtual types are used to convert signal values to character strings. The command works with signed integer values up to 64 bits.} {-delete <name> | {<list_of_strings>} <name>}
vlib {The vlib command creates a design library. You must use vlib rather than operating system commands to create a library directory or index file.} {[-help] [-short | -dos | -long | -unix] [-format {1|3|4}] [-type {directory | archive | flat}] [{-lock | -unlock} <design_unit>] [-locklib | -unlocklib] [-unnamed_designs <value>] <library_name>}
vlog {The vlog command compiles Verilog source code and SystemVerilog extensions into a specified working library (or to the work library by default). Type 'vlog -help' for complete syntax} {-noargs}
vmake {The vmake utility allows you to use a UNIX or Windows MAKE program to maintain libraries. You run vmake on a compiled design library, and the utility outputs a makefile. You can then run the makefile with a version of MAKE (not supplied with Questa) to reconstruct the library. You must invoke this command from either a UNIX or a Windows/DOS prompt.} {[-cygdrive] [-du <design_unit_name>...] [-f <filename>] [-fullsrcpath] [-ignore] [<library_name>] [-modelsimini <ini_filepath>] [-help]}
vmap {The vmap command defines a mapping between a logical library name and a directory by modifying the modelsim.ini file.} {[-help | -h] [-c | -del <logical_name> ... | <logical_name> [<path>]] [-modelsimini <path/modelsim.ini>]}
vopt {The vopt command performs global optimizations on designs after they have been compiled with vcom or vlog. Type 'vopt -help' for complete syntax} {-noargs-} 
vsim {The vsim command invokes the VSIM simulator or displays the results of a previous simulation run (when invoked with the -view switch). Type 'vsim -help' for complete syntax.} {-noargs-}
vsimAuth {Returns the authorization level (PE/SE, VHDL/Verilog/PLUS).} {-noargs-} 
vsimDate {Returns the date the executable was built, such as "Apr 10 2000".} {-noargs-} 
vsimId {Returns the identifying string, such as "Questa 6.1".} {-noargs-} 
vsimVersion {Returns the version as used by the licensing tools, such as "1999.04".} {-noargs-} 
vsimVersionString {Returns the full vsim version string.} {-noargs-} 
vsim_break {Interrupt running simulation.} {-noargs-} 
vsource {The vsource command specifies an alternative file to use for the current source file.} {[<filename>]} 
{wave cursor active} {Sets the active cursor to the specified cursor or, if no cursor is specified, reports the active cursor} {[-window <win>] [<cursor-num>]}
{wave cursor add} {Adds a new cursor at specified time and returns the name, number, and lock state of the newly added cursor} {[-window <win>] [-time <time>] [-name <name>] [-lock <0|1>] }
{wave cursor configure} {Examine or specify the wave cursor configuration} {[<cursor-num>] [-window <win>] [<option> [<value>]]}
{wave cursor delete} {Deletes the specified cursor or, if no cursor is specified, the active cursor} {[-window <win>] [<cursor-num>]}
{wave cursor see} {Positions the wave display such that the specified or active cursor appears at the specified percent from the left edge of the display - 0% is the left edge, 100% is the right edge.} {[-window <win>] [-at <percent>] [<cursor-num>]}
{wave cursor time} {Moves or reports the time of the specified cursor or, if no cursor is specified, the time of the active cursor} {[-window <win>] [-time <time>] [<cursor-num>]}
{wave collapse all} {Collapses simulation time over the full range of the simulation from time 0 to the current time} {[-window <win>]}
{wave collapse cursor} {Collapses simulation time at the time of the active cursor} {[-window <win>] [<cursor-num>]}
{wave collapse range} {Collapses simulation time over a specified simulation time range} {[-window <win>] <start-time> <end-time>}
{wave expand all} {Expands simulation time over the full range of the simulation from time 0 to the current time} {[-window <win>]}
{wave expand cursor} {Expands simulation time at the time of the active cursor} {[-window <win>] [<cursor-num>]}
{wave expand mode} {Specifies the expanded time display mode for the Wave window} {[-window <win>] [off | deltas | events]}
{wave expand range} {Expands simulation time over the specified simulation range} {[-window <win>] <start-time> <end-time>}
{wave interrupt} {Immediately stops wave window drawing} {[-window <win>]}
{wave refresh} {Cleans wave display and redraws waves} {[-window <win>]}
{wave seetime} {Positions the wave display such that the specified time appears at the specified percent from the left edge of the display - 0% is the left edge, 100% is the right edge.} {[-window <win>] [-at <percent>] -time <time>}
{wave zoom in} {Zoom in the wave display by the specified factor. The default factor is 2.0.} {[-window <win>] [<factor>]}
{wave zoom out} {Zoom out the wave display by the specified factor. The default factor is 2.0.} {[-window <win>] [<factor>]}
{wave zoom full} {Zoom the wave display to show the full simulation time.} {[-window <win>]}
{wave zoom last} {Return to last zoom range.} {[-window <win>]}
{wave zoom range} {Sets left and right edge of wave display to the specified start time and end time. If times are not specified, reports left and right edge times.} {[-window <win>] [<start-time> <end-time>]}
{wave create} {The wave create command generates a waveform known only to the GUI. You can then modify the waveform interactively and use the results to drive simulation. See the Questa Command Reference for syntax and argument descriptions.} {-noargs-}
{wave edit} {The wave edit command modifies waveforms created with the wave create command. See the Questa Command Reference for syntax and argument descriptions.} {-noargs-}
{wave export} {The wave export command creates a stimulus file from waveforms created with the wave create command.} {-designunit <name> -file <name> {-format force | vcd | vhdl | verilog} -starttime {<time><unit>} {-endtime <time><unit>}}
{wave import} {The wave import command imports an extended VCD file that was created with the wave export command. It cannot read extended VCD file created by software other than Questa. Use this command to apply a VCD file as stimulus to the current simulation.} {<VCD_file>}
{wave modify} {The wave modify command modifies waveform parameters set by a previous wave create command. See the Questa Command Reference for syntax and argument descriptions.} {-noargs-}
{wave sort} {This command sorts signals in the Wave window by name or full path name.} {{ascending | descending | fa | da} [-win <window_name>]}
when {The when command instructs Questa to perform actions when the specified conditions are met.} {[[-fast] [-id <id#>] [-label <label>] [-repeat] {<when_condition_expression>} {<command>}]}
where {The where command displays information about the system environment. This command is useful for debugging problems where Questa cannot find the required libraries or support files.} {-noargs-}
wlf2log {The wlf2log command translates a Questa WLF file (vsim.wlf) to a QuickSim II logfile.} {<wlffile> [-bits] [-fullname] [-help] [-inout] [-input] [-internal] [-l <instance_path>] [-lower] [-o <outfile>] [-output] [-quiet] }
wlf2vcd {The wlf2vcd command translates a Questa WLF file to a standard VCD file. Complex data types that are unsupported in the VCD standard (records, memories, etc.) are not converted.} {<wlffile> [-help] [-o <outfile>] [-quiet] }
wlfman {The wlfman command allows you to get information about and manipulate WLF files. Type wlfman -h for usage information.} {-noargs-}
wlfrecover {The wlfrecover tool attempts to "repair" WLF files that are incomplete due to a crash or the file being copied prior to completion of the simulation. You can run the tool from the VSIM> or Questa> prompt or from a shell.} {<filename> [-force] [-q]}
{write cell_report} {The write cell_report command writes to the Transcript pane or to a file a list of Verilog modules which qualified for and received gate-level cell optimizations. Gate-level cell optimizations are applied at the module level, in addition to normal Verilog optimizations, to improve performance of gate-level simulations.} {[-filter <number>] [-infile <filename>] [-nonopt] [[-outfile] <filename>]}
{write format} {The write format command records the names and display options of the HDL objects currently being displayed in the Analysis, List, Memory, Message Viewer, Test Browser, and Wave windows. The write format radix command will create a single .do file that will recreate all debug windows and all bp and signal (when) breakpoints.} {restart {-nobreak | -nolastnow | -nolist | -nomemory | -nosource | -novsim | -nowave} | {assertions | breakpoints | coverdirective | export_hier_config | list | memory | msgviewer | testbrowser | watch | wave } [-window <window_name>] <filename>}
{write list} {The write list command records the contents of the most recently opened or specified List window in a list output file.} {[-events] [-window <wname>] <filename>}
{write preferences} {The write preferences command saves the current GUI preference settings to a Tcl preference file. Settings saved include Wave, Objects, and Locals window column widths; Wave, Objects, and Locals window value justification; and Wave window signal name width.} {<preference file name>}
{write report} {The write report command prints a summary of the design being simulated including a list of all design units (VHDL configurations, entities, and packages, and Verilog modules) with the names of their source files.} {[-capacity [-l | -s] [-assertions | -classes | -cvg | -qdas | -solver]] | [-l | -s] | [-solver] | [-tcl] | [<filename>]}
{write timing} {The write timing command displays path delays and timing check limits, unadjusted for delay net delays, for the specified instance.} {[-recursive] [<filename>] [<instance_name1>...<instance_nameN>] [-simvalues]}
{write transcript} {The write transcript command writes the contents of the Transcript pane to the specified file. The resulting file can be used to replay the transcribed commands as a DO file (macro).} {[<filename>]}
{write tssi} {The write tssi command records the contents of the default or specified List window in a "TSSI format" file.} {[-window <wname>] <filename>}
{write wave} {The write wave command records the contents of the most currently opened or specified Wave window in PostScript format.} {<filename> [-end <time>] [-landscape] [-height <real_num>] [-margin <real_num>] [-perpage <time>] [-portrait] [-start <time>] [-width <real_num>] [-window <wname>]}
{xml2ucdb} {xml2ucdb is a utility used to convert an XML file to a UCDB file.} {<XML_filename> {<ucdb_filename> | -ucdbfilename <file>} [-help] {[-autonumber] | [-noautonumber]} [-autoweight] [-cfgfilename <path/ini_file_name>] [-createcovitem] [-datafields <str>] [-datalabels <str>] [-datatags <tag>] [-debug] [-descriptiontag <tag>] [-dofilename <file>] [-excelsheet <sheet_name>] [-excludesections {<sec>[.<sec>][-<sec>[.<sec>]}[,<...>]] [-excludetags <tags>] [-format {<format>}] [-formatlist] [-G<varname>=<value>] [-goaltag <tags>] [-inherit] [-linktag <tag>] [-linkattr <tag>] [-modelsimini <ini_filepath>] [-root <str>] [-sectionprefix <str>] [-sectiontags <tag>] [-searchpath <path/to/XML_input] [-startsection <num>] [-startstoring <num>] [-starttags <tags>] [-stylesheet] [-stoptags <tags>] [-tagprefix <str>] [-tagseparators <str>] [-title <str>] [-titletag <tag>] [-typeattr <name>] [-varfile <path/varfile_name>] [-verbose] [-version] [-viewtags] [-viewall] [-weighttag <tags>]}
{xprop assertlimit} {The xprop assertlimit command sets the assertion fail count limit for assertions met when simulation is run with xprop enable.} {<n>}
{xprop disable} {The xprop disable command disables the xprop simulation mode.} {-noargs-} 
{xprop enable} {The xprop enable command enables the xprop simulation mode.} {-noargs-} 