# help command command help
# The entries in this file have the form of a Tcl list.  
# One entry per line as follows:
#   cmd description arguments
#
# This file contains Tcl commands and backup command doc for anything
# that is not in ee_cmd_help.txt or pe_cmd_help.txt (which are maintained
# by the Doc group).
#

-none- {Type help <command> to get information on that command, or try one of the following:
  commands  List all available commands and topics.
  Debugging Lists debugging commands.
  Execution Information on controlling execution of the simulation.
  Tcl       Information on Tcl commands.
  Tk        Information on Tk commands.
  incrTcl   Information on incrTcl commands.
} {-nousage-}

Debugging {See these commands for debugging operations:  bp bd when examine step run change add delete force.} {-nousage-}

execution {See step run vsim_break stop.}   {-nousage-}

Show {The Show command lists HDL items and subregions visible from the current environment.} {[-all] [<pathname>]}
abort {The abort command halts the execution of a macro file interrupted by a breakpoint or error. When macros are nested, you may choose to abort the last macro only, abort a specified number of nesting levels, or abort all macros. The abort command may be used within a macro to return early.} {[depth | all]}
add {} {button|dataflow|list|log|memory|watch|wave <args>}
addTime {Return the sum of two Time values (e.g. addTime {1 ns} {25us})} {<t1> <t2>}
add_menurb {The add_menurb command creates a radiobutton within the specified menu of the specified window.} {<window_name> <menu_path> <label> <radiobutton_arguments>...}
apply_button_adder {Adds buttons to tool bar or footer of specified window.} {<window> <widget> <alignment> <bbg> <bfg> <text> <action>}
check {} {contention|float|stable}
clipboard {Tk command:  Manipulate Tk clipboard.} {<option> [<arg> <arg> ...]}
config {See 'configure'.} {<args>}
cont {See 'run -continue'.} {-noargs-}
delete {} {class|list|namespace|object|virtual|wave}
divTime {Return the quotient of time values t1/t2.} {<t1> <t2>}
echo {The echo command displays its arguments in the Main transcript window.} {<args>}
elite_edition {Returns true (1) if simulator is EE or SE version.  (not PE)} {-noargs-}
env {See 'environment' command.} {[-dataset] [-nodataset] [<dataset_prefix>[<pathname>]]}
environment_nosource {Change the environment (see 'environment' command) without updating the source window.} {<pathname>}
eqTime {Compare two time values for equality.} {<t1> <t2>}
exa {See 'examine' command.} {[-time <time>] [-delta <delta>] [-env <path>] [-expr <expression>] [-name] [-radix] [-value] <name>...}
exit {See 'quit' command} {}
find {} {classes|nets|objects|signals|virtuals}
findExec {Return the full pathname of the specified executable.  (searches $PATH)} {<name>}
get_menu_path {Return the widget pathname of the named menuitem.} {<window_name> <menu_path>}
ginfo {Get information about a grid widget.} {trees|rows|columns|widgets <gridPath_or_windowPath>}
gtTime {Return true (1) if time value t1 is greater than time value t2.} {<t1> <t2>}
gteTime {Return true (1) if time value t1 is greater than or equal to time value t2.} {<t1> <t2>}
int64ToReal {Convert two 32-bit integers into a real number.  (platform dependent)} {<high> <low>}
int64ToStr {Convert two 32-bit integers into a 64-bit number.} {<high> <low>}
intToTime {Convert two 32-bit integers into a 64-bit time value.} {<high> <low>}
lremove {Remove elements from a list.} {list start [end]}
ltTime {Return true (1) if time value t1 is less than time value t2.} {t1 t2}
lteTime {Return true (1) if time value t1 is less than or equal to time value t2.} {t1 t2}
luniq {Return list after removing adjacent duplicate elements.} {list}
max {Return max of a and b.} {a b}
mulTime {Return the product of time values t1 and t2.} {<t1> <t2>}
namespaceOf {Return the namespace name of the specified context.} {context}
neqTime {Return true (1) if time value t1 is not equal to time value t2.} {<t1> <t2>}
notrace {Terminating foreign interface tracing.} {-noargs-}
openlog {Open a wave log file in view mode.} {<filename> [<logical_name>]}
pathOf {Return the context pathname after removing the namespace name.} {<context>}
pedit {Interactively edit a Tcl proc.} {<procname>}
personal_edition {Returns true if simulator is running PE version.} {-noargs-}
property {} {list|wave}
puterr {Print a string to the error stream (stderr).} {<str>}
qhdel {See 'vdel'.} {args}
qhdir {See 'vdir'.} {args}
qhlib {See 'vlib'.} {args}
qvhcom {See 'vcom'.} {args}
qvlcom {See 'vlog'.} {args}
renamelog {Change logical name of a wave log file.} {<old-logical-name> <new-logical-name>}
rincr {Increment the value of a real variable.} {var [incr]}
sbrk {Return the address of the end of data memory.} {-noargs-}
scaleTime {Scale a time value by a real scale factor.} {time scaleFactor}
simNamespaceIsOpen {Returns true if simulator has a design loaded.} {-noargs-}
simtime {Returns a list of information about the current simulation state:  now delta context total-performance-samples.} {}
slave_mode {Returns true (1) if simulation is running in slave mode.} {-noargs-}
status {The status command lists all current interrupted macros.} {-noargs-}
subTime {Return the difference of time value t1 minus time value t2.} {<t1> <t2>}
tix {Tix command:  Manipulate Tix internal state.} {<option> [<arg> <arg> ...]}
toggle {} {add|report|reset}
truncate {Truncate a file to a specified length.} {<channelId> <length>}
usual {incrTk command:  access default option-handling commands} {[tag] [commands]}
vcd {} {add|checkpoint|comment|dumpports|dumpportsall|dumpportsflush|dumpportslimit|dumpportsoff|dumpportson|file|files|flush|limit|off|on}
virtual {} {count|define|delete|describe|expand|function|hide|log|nohide|nolog|region|save|show|signal|type}
vsimAuth {Return authorization level (PE|EE|SE / VHDL|Verilog|PLUS).} {-noargs-}
vsimVersionString {Return complete product version string} {-noargs-}
vsim_break {Interrupt running simulation.} {-noargs-}
write {} {cell_report|format|list|preferences|report|transcript|tssi|wave}
{add log} {The log command creates a logfile containing simulation data for all HDL items whose names match the provided specifications.} {[-flush] [-howmany] [-in] [-inout] [-internal] [-noflush] [-out] [-ports] [-recursive] <item_name>}
{add memory} {} {[-addressradix <radix>] [-dataradix <radix>] [-wordsperline <num>] <hierpath>}
{binary format} {Tcl command:  binary format creates a binary string from normal Tcl values.} {<formatString> [<arg> <arg> ...]}
{binary scan} {Tcl command:  binary scan extracts data from a binary string and returns it as ordinary Tcl string values.} {<string> <formatString> [<varName> <varName> ...]}
{check contention} {} {add|config|off}
{check float} {} {add|config|off}
{check stable} {} {on|off}
{delete list} {The delete command removes HDL items from the List window.} {[-window <wname>] <item_name>}
{delete virtual} {The delete virtual command removes virtual signals definitions.} {<virtual_signal_name>...}
{delete wave} {The delete command removes HDL items from the Wave window.} {[-window <wname>] <item_name>}
{find instances} {The 'find instances' command displays the full pathnames of all instances currently defined in the simulator whose names match the specified pattern.} {[-recursive] <item_name> ...}
{find nets} {The 'find nets' command displays the full pathnames of all HDL items in the design whose names match the name specification you provide.} {[-in] [-inout] [-internal] [-nofilter] [-out] [-ports] [-recursive] <item_name> ...}
{find objects} {Returns a list of objects found in the current namespace context.} {[-class <className>] [-isa <className>] [<object_name>]}
{find signals} {The 'find signals' command displays the full pathnames of all HDL items in the design whose names match the name specification you provide.} {[-in] [-inout] [-internal] [-nofilter] [-out] [-ports] [-recursive] <item_name> ...}
{find virtuals} {The 'find virtuals' command displays the full pathnames of all Virtual items currently defined in the simulator whose names match the specified pattern.} {[-kind <kind>] [-unsaved] [-recursive] <item_name> ...}
{virtual find} {See the 'find virtuals' command.} {-nousage-}

tabset {Set tab spacing for the given text widget.  Example:
    tabset .source.t 4} {textwidget tabs}

PrefSource {Preference settings for Source window.  See one of the following subtopics for more information:  
    HDLFileTypes
    WarnSourceChanged
    geometry
    HighlightErrorColor
    highlightExecutableLines
    tabs
    user_hook
    verilogFileTypes
    vhdlFileTypes
} {-nousage-}

{PrefSource(HDLFileTypes)} {File extensions of HDL source files.  (used by file browser)} {-nousage-}
{PrefSource(WarnSourceChanged)} {Boolean flag enables warning of source has changed and is not saved when closing the Source window.} {-nousage-}
{PrefSource(geometry)} {Default window size and location for the Source window.} {-nousage-}
{PrefSource(highlightExecutableLines)} {Boolean that enables highlighting line numbers of those lines in the source code that are executable.} {-nousage-}
{PrefSource(HighlightErrorColor)} {Highlight color of source lines containing errors.} {-nousage-}
{PrefSource(tabs)} {Tab stops in the Source window.
A single number, 'n', will set tab stops every 'n' characters.  (example: set PrefSource(tabs) 4, will set tab stops at 3 7 11 15, etc.)  
A list of distances will set tab stops at each location. (example:  set PrefSource(tabs) "0.5c 1.0c 1.5c", will set tab stops a  0.5 cm, 1 cm, and 1.5 cm.)} {-nousage-}
{PrefSource(user_hook)} {A list of Tcl procedures to call when a Source window is opened.  See the reference manual for details.} {-nousage-}
{PrefSource(verilogFileTypes)} {File extensions of Verilog source files.  (used by file browser)} {-nousage-}
{PrefSource(vhdlFileTypes)} {File extensions of VHDL source files.  (used by file browser)} {-nousage-}
