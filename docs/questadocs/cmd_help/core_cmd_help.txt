Tcl {See help on these commands:
  after       fcopy      load       seek           vwait    
  append      file       lrange     set            while    
  array       fileevent  lreplace   socket         
  bgerror     flush      lsearch    source   	   
  binary      for        lset       split    	   
  break       foreach    lsort      string         
  catch       format     msgcat     subst           
  cd          gets       namespace  switch         
  clock       glob       open       tcl_endOfWord           
  close       global     package    tcl_findLibrary         
  concat      history    parray     tcl_startOfNextWord     
  continue    http       pid        tcl_startOfPreviousWord  
  dde         if         proc       tcl_wordBreakAfter             
  encoding    incr       puts       tcl_wordBreakBefore            
  eof         info       pwd        tell        	           
  error       interp     read       time        	           
  eval        join       regexp     trace       	           
  exec        lappend    registry   unset                          
  exit        lindex     regsub     update                   
  expr        linsert    rename     uplevel                  
  fblocked    list       return     upvar                    
  fconfigure  llength    scan       variable                
} {-nousage-}
after {Tcl command:  Execute a command after a time delay} {cancel|idle|info|ms [<id>]|[<script>...]}
append {Tcl command:  Append all of the value arguments to the current value of variable varName.} {<varName> [<value> <value> <value> ...]}
array {Tcl command:  Manipulate array variables.} {<option> <arrayName> [<arg> <arg> ...]}
bgerror {Tcl command:  Command invoked to process background errors} {message}
binary {Tcl command:  See 'binary format' and 'binary scan'.} {<option>}
break {Tcl command:  Abort looping command.} {}
catch {Tcl command:  Evaluate script and trap exceptional returns.} {<script> [<varName>]}
cd {Tcl command:  Change working directory} {[<dirName>]}
clock {Obtain and manipulate time.} {<option> [<arg> <arg> ...]}
close {Close an open channel.} {<channelId>}
concat {Tcl command:  Join lists together.} {[<arg> <arg> ...]}
continue {Tcl command:  Skip to the next iteration of a loop.} {-noargs-}
dde {Tcl command:  Execute a Dynamic Data Exchange command} {servername|execute|poke|request|services|eval <args>}
encoding {Tcl command:  Manipulate encodings} {convertfrom|convertto|names|system <args> ...}
eof {Tcl command:  Check for end of file condition on channel.} {<channelId>}
error {Tcl command:  Generate an error.} {<message> [<info>] [<code>]}
eval {Tcl command:  Evaluate a Tcl script.} {<arg> [<arg> ...]}
exec {Invoke subprocess(es).} {[<switches>] <arg> [<arg> ...]}
exit {See 'quit' command} {}
expr {Tcl command:  Evaluate an expression.} {<arg> [<arg> <arg> ...]}
fblocked {Tcl command:  Test whether the last input operation exhausted all available input.} {<channelId>}
fconfigure {Tcl command:  Set and get options on a channel} {<channelId> [<name>] [<value>] [<name> <value> ...] }
fcopy {Tcl command:  Copy data from one channel to another.} {<inchan> <outchan> [-size <size>] [-command <callback>]}
file {Tcl command:  Manipulate file names and attributes.} {<option> <name> [<arg> <arg> ...]}
fileevent {Tcl command:  Execute a script when a channel becomes readable or writable} {<channelId> readable|writable [<script>]}
flush {Tcl command:  Flush buffered output for a channel} {<channelId>}
for {Tcl command:  ``For'' loop } {start test next body}
foreach {Tcl command:  Iterate over all elements in one or more lists.} {varlist1 list1 [varlist2 list2 ...] body}
format {Tcl command:  Format a string in the style of sprintf.} {formatString [arg arg ...]}
foreach {Tcl command:  Iterate over all elements in one or more lists.} {varlist1 list1 [varlist2 list2 ...] body}
format {Tcl command:  Format a string in the style of sprintf.} {formatString [arg arg ...]}
gets {Tcl command:  Read a line from a channel} {<channelId> [<varName>]}
glob {Tcl command:  Return names of files that match patterns} {[<switches>] <pattern> [<pattern> ...] }
global {Tcl command:  Access global variables} {<varname> [<varname> ...]}
history {Tcl command:  Manipulate the history list} {option args...}
http {Tcl command:  Client-side implementation of the HTTP/1.0 protocol.} {options args...}
if {Tcl command:  Execute scripts conditionally.} {expr1 [then] body1 elseif expr2 [then] body2 elseif ... [else] [bodyN]}
incr {Tcl command:  Increment the value of a variable.} {<varName> [<increment>]}
info {Tcl command:  Return information about the state of the Tcl interpreter} {<option> [<arg> <arg> ...]}
interp {Tcl command:  Create and manipulate Tcl interpreters} {<option> [<arg> <arg> ...]}
join {Tcl command:  Create a string by joining together list elements.} {list [joinString]}
lappend {Tcl command:  Append list elements onto a variable.} {<varName> [<value> <value> <value> ...]}
lindex {Tcl command:  Retrieve an element from a list.} {<list> <index>}
linsert {Tcl command:  Insert elements into a list} {<list> <index> <element> [<element> <element> ...]}
list {Tcl command:  Create a list.} {[<arg> <arg> ...]}
listbox {Tk command:  Create and manipulate listbox widgets} {<pathName> [<options>]}
llength {Tcl command:  Count the number of elements in a list} {<list>}
load {Tcl command:  Load machine code and initialize new commands.} {<fileName> [<packageName>] [<interp>]}
local {create an object local to a procedure} {<className> <objName> [<arg> <arg> ...]}
lrange {Tcl command:  Return one or more adjacent elements from a list} {list first last}
lreplace {Tcl command:  Replace elements in a list with new elements} {list first last [element element ...]}
lsearch {Tcl command:  See if a list contains a particular element} {[mode] list pattern}
lset {Tcl command:  Change an element in a list} {<varName> [<index>] <newValue>}
lsort {Tcl command:  Sort the elements of a list} {[options] list}
msgcat {Tcl command:  Tcl message catalog} {option args...}
namespace {Tcl command:  create and manipulate contexts for commands and variables} {[<option>] [<arg> ...]}
open {Tcl command:  Open a file-based or command pipeline channel.} {<fileName> [<access>] [<permissions>]}
package {Tcl command:  Facilities for package loading and version control.} {<option> <args>}
parray {Tcl command:  Prints names and values of all array elements} {<arrayName>}
pid {Tcl command:  Retrieve process id(s).} {[<fileId>]}
proc {Tcl command:  Create a Tcl procedure.} {<name> <args> <body>}
puts {Tcl command:  Write to a channel} {[-nonewline] [<channelId>] <string>}
pwd {Tcl command:  Return the current working directory} {}
read {Tcl command:  Read from a channel} {channelId numBytes}
regexp {Tcl command:  Match a regular expression against a string.} {[switches] exp string [matchVar] [subMatchVar subMatchVar ...]}
registry {Tcl command:  Manipulate the Windows registry} {option args...}
regsub {Tcl command:  Perform substitutions based on regular expression pattern matching.} {[switches] exp string subSpec varName}
rename {Tcl command:  Rename or delete a command.} {<oldName> <newName>}
return {Tcl command:  Return from a procedure.} {[-code <code>] [-errorinfo <info>] [-errorcode <code>] [<string>]}
scan {Tcl command:  Parse string using conversion specifiers in the style of sscanf.} {string format varName [varName ...]}
seek {Tcl command:  Change the access position for an open channel} {<channelId> <offset> [<origin>]}
set {Tcl command:  Read and write variables.} {<varName> [<value>]}
socket {Tcl command:  Open a TCP network connection.} {([options] host port) | (-server command [options] port)}
source {Tcl command:  Evaluate a file or resource as a Tcl script.} {<fileName>}
split {Tcl command:  Split a string into a proper Tcl list.} {string [splitChars]}
string {Tcl command:  Manipulate strings} {<option> <arg> [<arg> ...]}
subst {Tcl command:  Perform backslash, command, and variable substitutions.} {[-nobackslashes] [-nocommands] [-novariables] string}
switch {Tcl command:  Evaluate one of several scripts, depending on a given value.} {[options] string {pattern body [pattern body ...]}}
tcl_endOfWord {Tcl command:  Returns the index of the first end-of-word location that occurs after a starting index start in the string str.} {<str> <start>}
tcl_findLibrary {Tcl command:  Search standard locations for tcl extension libraries.} {basename version patch initScript enVarName varName}
tcl_startOfNextWord {Tcl command:  Returns the index of the first start-of-word location that occurs after a starting index start in the string str.} {<str> <start>}
tcl_startOfPreviousWord {Tcl command:  Returns the index of the first start-of-word location that occurs before a starting index start in the string str.} {<str> <start>}
tcl_wordBreakAfter {Tcl command:  Returns the index of the first word boundary after the starting index start in the string str.} {<str> <start>}
tcl_wordBreakBefore {Tcl command:  Returns the index of the first word boundary before the starting index start in the string str.} {<str> <start>}
tell {Tcl command:  Return current access position for an open channel.} {channelId}
time {Tcl command:  Time the execution of a script.} {script [count]}
trace {Monitor variable accesses} {<option> [<arg> <arg> ...]}
unknown {Handle attempts to use non-existent commands.} {<cmdName> [<arg> <arg> ...]}
unset {Tcl command:  Delete variables.} {name [name name ...]}
update {Tcl command:  Process pending events and idle callbacks.} {[idletasks]}
uplevel {Execute a script in a different stack frame.} {[level] arg [arg ...]}
upvar {Tcl command:  Create link to variable in a different stack frame.} {[level] otherVar myVar [otherVar myVar ...]}
variable {Tcl command:  create and initialize a namespace variable.} {[<name> <value>...] <name> [<value>]}
vwait {Tcl command:  Process events until a variable is written.} {[<varName>]}
while {Tcl command:  Execute script repeatedly as long as a condition is met.} {test body}

# Tk commands
Tk {See help on these commands:
  bell         grab        place               tk_getSaveFile       
  bind         grid        radiobutton         tk_menuSetFocus      
  bindtags     image       raise               tk_messageBox        
  button       label       scale               tk_popup     
  canvas       labelframe  scrollbar           tk_textCopy  
  checkbutton  listbox     selection           tk_textCut   
  clipboard    lower       send                tk_textPaste 
  destroy      menu        spinbox             tkwait               
  entry        menubutton  text                toplevel     
  event        message     tk                  update               
  focus        option      tk_chooseColor      winfo                
  font         pack        tk_chooseDirectory  wm              
  frame        panedwindow tk_getOpenFile     
} {-nousage-}
bedit {Tk command:  interactive edit of bind script.} {<tag> <sequence>}
bell {Tk command:  Ring a display's bell.} {[-displayof <window>]}
bind {Tk command:  Arrange for X events to invoke Tcl scripts.} {<tag> [<sequence>] [[+]<script>]}
bindtags {Tk command:  Determine which bindings apply to a window, and order of evaluation.} {<window> [<tagList>]}
button {Tk command:  Create and manipulate button widgets.} {<pathName> [<options>]}
canvas {Tk command:  Create and manipulate canvas widgets.} {<pathName> [<options>]}
checkbutton {Create and manipulate checkbutton widgets} {<pathName> [<options>]}
clipboard {Tk command:  Manipulate Tk clipboard.} {<option> [<arg> <arg> ...]}
destroy {Tk command:  Destroy one or more windows.} {[<window> <window> ...]}
entry {Tk command:  Create and manipulate entry widgets.} {<pathName> [<options>]}
event {Tk command:  Miscellaneous event facilities: define virtual events and generate events} {<option> [<arg> <arg> ...]}
focus {Tk command:  Manage the input focus} {<option> [<arg> <arg> ...]}
font {Tk command:  Create and inspect fonts.} {<option> [<arg> <arg> ...]}
frame {Tk command:  Create and manipulate frame widgets} {<pathName> [<options>]}
grab {Confine pointer and keyboard events to a window sub-tree.} {<option> [<arg> <arg> ...] }
grid {Geometry manager that arranges widgets in a grid} {<option> <arg> [<arg> ...]}
image {Create and manipulate images} {<option> [<arg> <arg> ...]}
label {Create and manipulate label widgets.} {<pathName> [<options>]}
lower {Tk command:  Change a window's position in the stacking order} {window [belowThis]}
menu {Tk command:  Create and manipulate menu widgets.} {<pathName> [<options>]}
menubutton {Tk command:  Create and manipulate menubutton widgets.} {<pathName> [<options>]}
message {Tk command:  Create and manipulate message widgets.} {<pathName> [<options>]}
option {Tk command:  Add/retrieve window options to/from the option database} {<option> <args>}
pack {Tk command: Geometry manager that packs around edges of cavity } {<option> <arg> [<arg> ...]}
panedwindow {Tk command:  create a panedwindow widget} {<pathName> [<options>]}
place {Tk command:  Geometry manager for fixed or rubber-sheet placement} {<option> <args>}
radiobutton {Tk command:  Create and manipulate radiobutton widgets.} {<pathName> [<options>]}
raise {Tk command:  Change a window's position in the stacking order} {window [aboveThis]}
scale {Tk command:  Create and manipulate scale widgets.} {<pathName> [<options>]}
scrollbar {Tk command:  Create and manipulate scrollbar widgets.} {<pathName> [<options>]}
selection {Tk command:  Manipulate the X selection.} {<option> [<arg> <arg> ...]}
send {Tk command:  Execute a command in a different application} {[options] app cmd [arg arg ...]}
spinbox {Tk command:  Create a spinbox widget.} {<pathName> [<options>]}
text {Tk command:  Create and manipulate text widgets} {<pathName> [<options>]}
tk {Tk command:  Manipulate Tk internal state.} {<option> [<arg> <arg> ...]}
tk_chooseColor {Tk command:  pops up a dialog box for the user to select a color.} {[<option> <value> ...]}
tk_chooseDirectory {Tk command:  pop up a dialog box for the user to select a directory.} {[<option> <value> ...]}
tk_dialog {Tk command:  Create modal dialog and wait for response.} {window title text bitmap default string string ...}
tk_getOpenFile {Tk command:  pop up a dialog box for the user to select a file to open.} {[<option> <value> ...]}
tk_getSaveFile {Tk command:  pop up a dialog box for the user to select a file to save.} {[<option> <value> ...]}
tk_menuSetFocus {Tk command:  used by the menu to save current focus and set the focus to <pathName>.} {<pathName>}
tk_messageBox {Tk command:  pops up a message window and waits for user response.} {[<option> <value> ...]}
tk_popup {Tk command:  Post a popup menu} {menu x y [entry]}
tk_textCopy {Tk command:  Copies the selected text in the widget specified by <pathName> to the clipboard.} {<pathName>}
tk_textCut {Tk command:  Copies the selected text in the widget specified by <pathName> to the clipboard and deletes the selection.} {<pathName>}
tk_textPaste {Tk command:  Inserts the contents of the clipboard at the insertion cursor in the text widget specified by <pathName>.} {<pathName>}
tkwait {Tk command:  Wait for variable to change or window to be destroyed.} {(variable|visibility|window) name}
toplevel {Tk command:  Create and manipulate toplevel widgets.} {<pathName> [<options>]}
winfo {Tk command:  Return window-related information} {<option> [<arg> <arg> ...]}
wm {Tk command:  Communicate with window manager.} {<option> <window> [<args>]}

# IncrTcl commands
incrTcl {See help on these commands:
  body      class  code   configbody  delete
  ensemble  find   itcl   itcl_class  itcl_info
  itclvars  local  scope
} {-nousage-}
body {incrTcl command:  change the body for a class method/proc.} {className::function args body}
class {incrTcl command:  create a class of objects.} {<className> <body>}
code {incrTcl command:  capture the namespace context for a code fragment.} {[-namespace <name>] <command> [<arg> <arg> ...]}
ensemble {incrTcl command:  create or modify a composite command.} {<ensName> [<command> <arg> <arg>...]}
scope {incrTcl command:  capture the namespace context for a variable.} {}
{delete class} {incrTcl command:  Deletes one or more [incr\ Tcl] classes called name.} {<name> [<name>...]}
{delete namespace} {incrTcl command:  Deletes one or more namespaces called name.} {<name> [<name>...]}
{delete object} {incrTcl command:  Deletes one or more [incr\ Tcl] objects called name.} {<name> [<name>...]}
{find classes} {incrTcl command:  Returns a list of classes found in the current namespace context.} {[<class_name>]}
scope {incrTcl command:  capture the namespace context for a variable.} {}
