	       IEEE Standard VHDL Mathematical Packages

Because of the restrictive copyright (see below) that the IEEE has
placed on the IEEE Standard VHDL Mathematical Package, Mentor
Graphics cannot redistribute the source code to our customers.  All
we are allowed is to compile the source code and distribute the
compiled form (i.e. library).  Customers can obtain the original
source from the IEEE website at http://standards.ieee.org/downloads/1076/1076-2008/.

This is the IEEE copyright notice:
------------------------------------------------------------------------
--
-- Copyright 1996 by IEEE. All rights reserved.
--
-- This source file is an essential part of IEEE Std 1076.2-1996, IEEE Standard 
-- VHDL Mathematical Packages. This source file may not be copied, sold, or 
-- included with software that is sold without written permission from the IEEE
-- Standards Department. This source file may be used to implement this standard 
-- and may be distributed in compiled form in any manner so long as the 
-- compiled form does not allow direct decompilation of the original source file.
-- This source file may be copied for individual use between licensed users. 
-- This source file is provided on an AS IS basis. The IEEE disclaims ANY 
-- WARRANTY EXPRESS OR IMPLIED INCLUDING ANY WARRANTY OF MERCHANTABILITY 
-- AND FITNESS FOR USE FOR A PARTICULAR PURPOSE. The user of the source 
-- file shall indemnify and hold IEEE harmless from any damages or liability 
-- arising out of the use thereof.



The pre-compiled package can be used without the original source if
you know what constants, functions and procedures are available in the
packages.  The Math_Real and Math_Complex packages contain the typical
trigonometric, logarithmic, statistical, etc., functions as well as the
typical mathematical constants.

The Math_Real package contains the constants math_e, math_1_over_e,
math_pi, math_2_pi, math_1_over_pi, math_pi_over_2, math_pi_over_3,
math_pi_over_4, math_3_pi_over_2, math_log_of_2, math_log_of_10,
math_log2_of_e, math_log10_of_e, math_sqrt_2, math_1_over_sqrt_2,
math_sqrt_pi, math_deg_to_rad, math_rad_to_deg.

It also contains these functions, procedures and operators: 

    -- Conversions
    function sign (x: in real ) return real;
    function ceil (x : in real ) return real;
    function floor (x : in real ) return real;
    function round (x : in real ) return real;
    function trunc (x : in real ) return real;
    function "mod" (x, y: in real ) return real;
    function realmax (x, y : in real ) return real;
    function realmin (x, y : in real ) return real;

    -- Random Number
    procedure uniform(variable seed1,seed2:inout positive; variable x:out real);
    -- Roots and logs
    function sqrt (x : in real ) return real;
    function cbrt (x : in real ) return real;
    function "**" (x : in integer; y : in real) return real;
    function "**" (x : in real; y : in real) return real;
    function exp (x : in real ) return real;
    function log (x : in real ) return real;
    function log2 (x : in real ) return real;
    function log10 (x : in real ) return real;
    function log (x: in real; base: in real) return real;

    -- Trigonometric
    function  sin (x : in real ) return real;
    function  cos ( x : in real ) return real;
    function  tan (x : in real ) return real;
    function  arcsin (x : in real ) return real;
    function  arccos (x : in real ) return real;
    function  arctan (y : in real) return real;
    function  arctan (y : in real; x : in real) return real;

    -- Hyperbolic
    function sinh (x : in real) return real;
    function cosh (x : in real) return real;
    function tanh (x : in real) return real;
    function arcsinh (x : in real) return real;
    function arccosh (x : in real) return real;
    function arctanh (x : in real) return real;

The Math_Complex package defines a complex type along with a complete
set of mathematical operations for that type.  The complex types are
defined as follows:

    type COMPLEX is
        record
                RE: REAL;        -- Real part
                IM: REAL;        -- Imaginary part
        end record;

    subtype POSITIVE_REAL is REAL range 0.0 to REAL'HIGH;

    subtype PRINCIPAL_VALUE is REAL range -MATH_PI to MATH_PI;

    type COMPLEX_POLAR is
        record
                MAG: POSITIVE_REAL;    -- Magnitude
                ARG: PRINCIPAL_VALUE;  -- Angle in radians; -MATH_PI is illegal
        end record;

There are also a few fundemental constants defined:

    MATH_CBASE_1 defined as COMPLEX'(1.0, 0.0)
    MATH_CBASE_J defined as COMPLEX'(0.0, 1.0)
    MATH_CZERO defined as COMPLEX'(0.0, 0.0)

The Math_Complex package contains these functions and operators: 

    -- Conversion and comparison operations
    function "=" ( L: in COMPLEX_POLAR;  R: in COMPLEX_POLAR ) return BOOLEAN;
    function "/=" ( L: in COMPLEX_POLAR;  R: in COMPLEX_POLAR ) return BOOLEAN;
    function CMPLX(X: in REAL;  Y: in REAL:= 0.0 ) return COMPLEX;
    function GET_PRINCIPAL_VALUE(X: in REAL ) return PRINCIPAL_VALUE;
    function COMPLEX_TO_POLAR(Z: in COMPLEX ) return COMPLEX_POLAR;
    function POLAR_TO_COMPLEX(Z: in COMPLEX_POLAR ) return COMPLEX;
    function "ABS"(Z: in COMPLEX ) return POSITIVE_REAL;
    function "ABS"(Z: in COMPLEX_POLAR ) return POSITIVE_REAL;
    function ARG(Z: in COMPLEX ) return PRINCIPAL_VALUE;
    function ARG(Z: in COMPLEX_POLAR ) return PRINCIPAL_VALUE;
    function "-" (Z: in COMPLEX ) return COMPLEX;
    function "-" (Z: in COMPLEX_POLAR ) return COMPLEX_POLAR;
    function CONJ (Z: in COMPLEX) return COMPLEX;
    function CONJ (Z: in COMPLEX_POLAR) return COMPLEX_POLAR;

    -- Root, logs, etc.
    function SQRT(Z: in COMPLEX ) return COMPLEX;
    function SQRT(Z: in COMPLEX_POLAR ) return COMPLEX_POLAR;
    function EXP(Z: in COMPLEX ) return COMPLEX;
    function EXP(Z: in COMPLEX_POLAR ) return COMPLEX_POLAR;
    function LOG(Z: in COMPLEX ) return COMPLEX;
    function LOG2(Z: in COMPLEX ) return COMPLEX;
    function LOG10(Z: in COMPLEX ) return COMPLEX;
    function LOG(Z: in COMPLEX_POLAR ) return COMPLEX_POLAR;
    function LOG2(Z: in COMPLEX_POLAR ) return COMPLEX_POLAR;
    function LOG10(Z: in COMPLEX_POLAR ) return COMPLEX_POLAR;
    function LOG(Z: in COMPLEX; BASE: in REAL) return COMPLEX;
    function LOG(Z: in COMPLEX_POLAR; BASE: in REAL ) return COMPLEX_POLAR;

    -- Trigonometric functions
    function SIN (Z : in COMPLEX ) return COMPLEX;
    function SIN (Z : in COMPLEX_POLAR ) return COMPLEX_POLAR;
    function  COS (Z : in COMPLEX ) return COMPLEX;
    function  COS (Z : in COMPLEX_POLAR ) return COMPLEX_POLAR;

    -- Hyperbolic functions
    function SINH (Z : in COMPLEX ) return COMPLEX;
    function SINH (Z : in COMPLEX_POLAR ) return COMPLEX_POLAR;
    function COSH (Z : in COMPLEX ) return COMPLEX;
    function COSH (Z : in COMPLEX_POLAR ) return COMPLEX_POLAR;

    -- Arithmetic functions
    function "+" ( L: in COMPLEX;  R: in COMPLEX ) return COMPLEX;
    function "+" ( L: in REAL;     R: in COMPLEX ) return COMPLEX;
    function "+" ( L: in COMPLEX;  R: in REAL )    return COMPLEX;
    function "+" ( L: in COMPLEX_POLAR; R: in COMPLEX_POLAR)
                                                        return COMPLEX_POLAR;
    function "+" ( L: in REAL;  R: in COMPLEX_POLAR) return COMPLEX_POLAR;
    function "+" ( L: in COMPLEX_POLAR;  R: in REAL) return COMPLEX_POLAR;
    function "-" ( L: in COMPLEX;  R: in COMPLEX ) return COMPLEX;
    function "-" ( L: in REAL;     R: in COMPLEX ) return COMPLEX;
    function "-" ( L: in COMPLEX;  R: in REAL )    return COMPLEX;
    function "-" ( L: in COMPLEX_POLAR; R: in COMPLEX_POLAR)
                                                        return COMPLEX_POLAR;
    function "-" ( L: in REAL;  R: in COMPLEX_POLAR) return COMPLEX_POLAR;
    function "-" ( L: in COMPLEX_POLAR;  R: in REAL) return COMPLEX_POLAR;
    function "*" ( L: in COMPLEX;  R: in COMPLEX ) return COMPLEX;
    function "*" ( L: in REAL;  R: in COMPLEX ) return COMPLEX;
    function "*" ( L: in COMPLEX;  R: in REAL )  return COMPLEX;
    function "*" ( L: in COMPLEX_POLAR; R: in COMPLEX_POLAR)
                                                        return COMPLEX_POLAR;
    function "*" ( L: in REAL;  R: in COMPLEX_POLAR) return COMPLEX_POLAR;
    function "*" ( L: in COMPLEX_POLAR;  R: in REAL) return COMPLEX_POLAR;
    function "/" ( L: in COMPLEX;  R: in COMPLEX ) return COMPLEX;
    function "/" ( L: in REAL;  R: in COMPLEX ) return COMPLEX;
    function "/" ( L: in COMPLEX;  R: in REAL )    return COMPLEX;
    function "/" ( L: in COMPLEX_POLAR; R: in COMPLEX_POLAR)
                                                        return COMPLEX_POLAR;
    function "/" ( L: in REAL;  R: in COMPLEX_POLAR) return COMPLEX_POLAR;
    function "/" ( L: in COMPLEX_POLAR;  R: in REAL) return COMPLEX_POLAR;
