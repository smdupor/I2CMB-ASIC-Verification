                     Release Notes For Questa Sim 2020.4

                                 Oct 13 2020
               Copyright 1991-2020 Mentor Graphics Corporation
                            All rights reserved.
      This document contains information that is proprietary to Mentor
                                  Graphics
   Corporation. The original recipient of this document may duplicate this
      document in whole or in part for internal business purposes only,
                                  provided
   that this entire notice appears in all copies. In duplicating any part
                                     of
    this document the recipient agrees to make every reasonable effort to
      prevent the unauthorized use and distribution of the proprietary
                                information.
     TRADEMARKS: The trademarks, logos and service marks ("Marks") used
                                   herein
   are the property of Mentor Graphics Corporation or other third parties.
      No one is permitted to use these Marks without the prior written
                                   consent
   of Mentor Graphics or the respective third-party owner. The use herein
   of a third-party Mark is not an attempt to indicate Mentor Graphics as
                                      a
     source of a product, but is intended to indicate a product from, or
   associated with, a particular third party. The following are trademarks
                                     of
    of Mentor Graphics Corporation: Questa, ModelSim, JobSpy, and Signal
                                    Spy.
        A current list of Mentor Graphics trademarks may be viewed at
               www.mentor.com/terms_conditions/trademarks.cfm.
      End-User License Agreement: You can print a copy of the End-User
                                   License
        Agreement from: www.mentor.com/terms_conditions/enduser.cfm.
   _______________________________________________________________________

     * How to Get Support
       For information on how to obtain technical support, visit the
       support page at
       [1]http://supportnet.mentor.com
   _______________________________________________________________________

  Index to Release Notes

     * [2]Key Information
     * [3]Release Announcements in 2020.4
     * [4]Base Product Specifications in 2020.4
     * [5]Compatibility Issues with Release 2020.4
     * [6]SystemVerilog Defects Repaired in 2020.4
     * [7]VHDL Defects Repaired in 2020.4
     * [8]General Enhancements in 2020.4
     * [9]SystemVerilog Enhancements in 2020.4
     * [10]Mixed Language Enhancements in 2020.4
     * [11]Document Revision History in 2020.4
   _______________________________________________________________________

   Key Information
     * QSIM-555 - Systemc/GCC Changes starting 2020.1:
       o SystemC/DPI/PLI/VPI/FLI default compiler (GCC) for linux and
       linux_x86_64 platforms is upgraded to 7.4.0
       o GCC 4.5.0 is no longer supported and it will no longer be
       distributed with the release. This affects linux and linux_x86_64
       platforms only.
       o Supported compilers on linux and linux_x86_64 platforms:
       gcc-7.4.0, gcc-5.3.0 and gcc-4.7.4
       o Support for the IEEE 1666-2005 SystemC-2.2 standard has been
       deprecated and it is no longer supported.
     * Starting 2021.1 release, Redhat Enterprise Linux (RHEL) 6 platform
       and Suse Enterprise Linux (SLES) 11 will not be supported.
     * The Register Assistant version included within this release has
       been upgraded to 2020.4.
       RUVM/2020.4 is a native 64-bit application.
   _______________________________________________________________________

   Release Announcements in 2020.4
     * Due to enhanced security restrictions with web browser PDF
       plug-ins, some links do not function. Links in HTML documentation
       are fully functional.
       Clicking a link within a PDF viewed in a web browser may result in
       no action, or it may load the title page of the current PDF manual
       (instead of the intended target in the PDF manual). The unresolved
       link behavior occurs in all web browsers on Windows and Linux
       platforms. Because of this behavior, the navigational experience of
       PDF manuals is compromised. PDF is ideal for printing because of
       its page-oriented layout.
       Use the HTML manuals to search for topics, navigate between topics,
       and click links to examples, videos, reference material, and other
       related technical content.
       For information about Adobe's discontinued support of Adobe Reader
       on Linux platforms and your available options, refer to Knowledge
       Article MG596568 on SupportNet.
       Linux is a registered trademark of Linus Torvalds in the U.S. and
       other countries.
     * Since 2019.1 release, support for Windows 7 and 8.1 have
       discontinued. Only Windows 10 is supported. However, we continue to
       support Windows 7 & 8.1 with our 10.7 release series until their
       planned End Of Life (10.7 EOL - mid 2020)
     * Starting 2020.2 release, support for Universal VHDL Verification
       Methodology has been added to Questa Simulation.
       The UVVM library is included in this download
   _______________________________________________________________________

   Base Product Specifications in 2020.4
     * [Supported Platforms]
       Linux RHEL 6 x86/x86-64
       Linux RHEL 7 x86/x86-64
       Linux RHEL 8 x86/x86-64
       Linux SLES 11 x86/x86-64
       Linux SLES 12 x86/x86-64
       Windows 10 x86/x64
       [Supported GCC Compilers (for SystemC)]
       gcc-7.4.0-linux/gcc-7.4.0-linux_x86_64
       gcc-5.3.0-linux/gcc-5.3.0-linux_x86_64
       gcc-4.7.4-linux/gcc-4.7.4-linux_x86_64
       gcc-4.2.1-mingw32vc12
       [OVL (shipped with product)]
       v2.8.1
       [VHDL OSVVM (shipped with product)]
       v2014.07
       [VHDL UVVM (shipped with product)]
       UVVM v2019.11.25
       [Licensing]
       FLEXnet v11.16.4.0
       MSL v2019_3
       MGLS v9.22_3.1.0
       PCLS v9.22.3.1.0
   _______________________________________________________________________

   Compatibility Issues with Release 2020.4

   SystemVerilog Compatibility
     * QSIM-65870 - (source) In some rare cases involving parameterized
       classes, a call to class::randomize() with an invalid argument that
       is not a field of the randomized class will not elicit an error
       during compile time. During simulation, the call with the illegal
       argument would also incorrectly be allowed to proceed without any
       error. The simulation time behavior has been changed to check and
       enforce the legality of arguments to class::randomize(). Any
       argument that is not a field of the randomized class will trigger a
       (vsim-7210) error. Note that this new error is suppressible, if the
       old (broken) behavior is desired.
     * QSIM-65052 - (results) In some rare cases, randomize() would avoid
       selecting specific valid solutions from the solution space when
       evaluating a randomization scenario involving array.sum()
       constraints. This issue has been fixed.
     * QSIM-66481 - (results) In some rare cases, randomize() would
       incorrectly evaluate constraints involving the queue-end expression
       ($) when specified within an iterative constraint. This issue has
       been fixed.

   VHDL Compatibility
     * [nodvtid] - (source) Fixed a bug where modifications to aliases
       were not affecting the original object.
     * [nodvtid] - (source, results) Refactored how -g / -G values are
       handled, now doing proper size checking to prevent unexpected
       errors where the value doesn't match the target object. Will now
       throw a warning if the value doesn't fit the constraints of the
       target object.

   Mixed Language Compatibility
     * VISU-18493 - (source, results) With 2020.3 onwards Symphony analog
       Vector support has been added in visualizer debug support. This
       will break the forward compatibility ( 2020.3 generated design.bin
       cannot be loaded from 2020.2 visualizer) whereas backward
       compatibility will remain intact (2020.2 generated design.bin can
       be loaded from 2020.3 visualizer)

   General Compatibility
     * QSIM-65779 - (source) Added suppressible error messages for the
       case where uvm_hdl_check_path returns FALSE in -qfd mode. This
       change may cause some existing customer testcases to give these
       error messages. They may be suppressed the messages using the vsim
       option -suppress 16126.
   _______________________________________________________________________

   SystemVerilog Defects Repaired in 2020.4
     * QSIM-64826 - In some rare cases, randomize() would generate a
       solution violating a constraint involving an element of a virtual
       interface. This issue has been fixed.
     * QSIM-64538 - In some rare cases, randomize() would crash when
       evaluating a randset with the BDD solve engine. This issue has been
       fixed.
     * QSIM-64417 - In some rare cases, randomize() would generate a
       solution violating an in-line constraint involving a local
       automatic variable. This issue has been fixed.
     * QSIM-64644 - In some rare cases, randomize() would encounter an
       internal error when evaluating scenarios involving random variables
       of packed struct type. This issue has been fixed.
     * QSIM-64586 - In some rare cases, randomize() would incorrectly
       interpret a 'unique' constraint within an if/else or 'soft' context
       as a non-conditional, 'hard' constraint. This issue has been fixed.
     * QSIM-64319 - In some rare cases, randomize() would generate a
       solution violating a constraint of the form "!(rand_var inside {
       const_array })". This issue has been fixed.
     * QSIM-64316 - In some rare cases, a randomize() call would crash
       when evaluating a constraint involving a non-random unpacked array.
       This issue has been fixed.
     * QSIM-64243 - In some rare cases, randomize() would trigger an
       internal error when evaluating a 'dist' constraint with values on
       the RHS that are outside of the domain of the target (LHS) type.
       This issue has been fixed.
     * QSIM-64160 - In some rare cases, during compilation, a package
       containing a randomize() call will trigger a spurious (vlog-2944)
       "Illegal randomize() function call in random constraint" error.
       This issue has been fixed.
     * QSIM-64132 - Vlog sometimes gave incorrect errors like:
       ** Error: while parsing file test.sv(50): Failed to find the name
       'get_type' in scope 'tpkg'
       For names like 'pkg::typename::get_type() where "typename" is a
       typedef name resolving to a class.
     * QSIM-64922 - Vlog reported the error:
       ** Error: test.sv(7) Illegal reference to an interface type C::Intf
       in implements clause.
       In cases where "C" was a parameterized class type and 'Intf" was a
       typedef name referenceing an interface class.
     * QSIM-66018 - In some rare cases, randomize() would report a
       spurious (vsim-7090) error (Invalid X or Z in a state expression
       value within a constraint) when evaluating a function call in a
       constraint. This issue has been fixed.
     * QSIM-65455 - In some rare cases, randomize() would incorrectly
       return 0 (no solutions) for a randomization scenario involving a
       negated "inside" constraint where a constant unpacked array
       appeared as an operand on the RHS (when the solution set contained
       valid solutions). This issue has been fixed.
     * QSIM-65052 - (results) In some rare cases, randomize() would avoid
       selecting specific valid solutions from the solution space when
       evaluating a randomization scenario involving array.sum()
       constraints. This issue has been fixed.
     * QSIM-64985 - Fixed an internal error in vopt that would occur in
       some cases involving a constraint expression containing a net
       (wire).
     * QSIM-65623 - Fixed an issue which would cause randomize() to
       incorrectly evaluate constraints involving random variables that
       are/contain unpacked unions.
     * QSIM-66481 - (results) In some rare cases, randomize() would
       incorrectly evaluate constraints involving the queue-end expression
       ($) when specified within an iterative constraint. This issue has
       been fixed.
     * QSIM-66347 - In some rare cases, randomize() would incorrectly
       evaluate constraints involving function calls to
       "associative_array.num()". This issue has been fixed.
     * QSIM-65870 - (source) In some rare cases involving parameterized
       classes, a call to class::randomize() with an invalid argument that
       is not a field of the randomized class will not elicit an error
       during compile time. During simulation, the call with the illegal
       argument would also incorrectly be allowed to proceed without any
       error. The simulation time behavior has been changed to check and
       enforce the legality of arguments to class::randomize(). Any
       argument that is not a field of the randomized class will trigger a
       (vsim-7210) error. Note that this new error is suppressible, if the
       old (broken) behavior is desired.
     * QSIM-65753 - Significantly improved the performance (simulation cpu
       time) of randomize() calls involving constraints with containing
       exponentiation expressions having a base value that is a power of
       2.
   _______________________________________________________________________

   VHDL Defects Repaired in 2020.4
     * QSIM-63590 - Vopt could crash if concatenation occur on an array
       type whose elements are unconstrained.
     * QSIM-65962 - During compilation with the -autoorder and -quiet
       switches, if semantic errors were encountered during the refresh
       phase, the errors would not be printed. This behavior is incorrect,
       and now all errors are printed, though other compilation logging
       messages are suppressed.
     * QSIM-66278 - Large data structures that take over 2Gbytes of space
       would crash if default initialization is used. For this to happen
       the default value for all fields in the data structure must be 0 or
       NULL. Explicitly initializing the object will work around the
       issue.
     * QSIM-65639 - The design.bin could have incorrect bounds on signals.
       This occurs if the signal bounds depend on functions calls. An
       these functions use the std.textio.
     * QSIM-64242 - For certain cases, string type variables inside
       functions used to retain values from previous call. This has been
       fixed.
     * QSIM-63680 - In some case where vhdl files were compiled with
       different VHDL versions, some logical operations were producing an
       internal error. This has been fixed
     * [nodvtid] - (source) Fixed a bug where modifications to aliases
       were not affecting the original object.
     * [nodvtid] - (source, results) Refactored how -g / -G values are
       handled, now doing proper size checking to prevent unexpected
       errors where the value doesn't match the target object. Will now
       throw a warning if the value doesn't fit the constraints of the
       target object.
   _______________________________________________________________________

   General Enhancements in 2020.4
     * QSIM-65779 - (source) Added suppressible error messages for the
       case where uvm_hdl_check_path returns FALSE in -qfd mode. This
       change may cause some existing customer testcases to give these
       error messages. They may be suppressed the messages using the vsim
       option -suppress 16126.
   _______________________________________________________________________

   SystemVerilog Enhancements in 2020.4
     * QSIM-64441 - Implemented several enhancements to the RNG trace
       feature to improve usability for large testcases:
         1. Filter out non-random class initialization operations from RNG
            trace output (enabled by default). Specify vsim command line
            option "-rngtraceopt=+shownonrandclass" to instruct RNG trace
            to preserve these operations.
         2. Filter out set_randstate() calls that do not effectively
            change the randstate from RNG trace output (enabled by
            default). Specify vsim command line option
            "-rngtraceopt=+showtrivialset" to instruct RNG trace to
            preserve these operations.
         3. Filter out thread initialization operations from RNG trace
            output (enabled by default). Specify vsim command line option
            "-rngtraceopt=+showthreadinit" to instruct RNG trace to
            preserve these operations.
         4. To facilitate RNG analysis for testbenches that generate large
            RNG trace files:
            - Specify "-rngtraceskip=<value>" to instruct RNG trace to
            skip recording the first <value> RNG operations in the trace
            file.
            - Specify "-rngtracemax=<value> to instruct RNG trace to stop
            recording after <value> operations have been written to the
            trace file.
     * QSIM-63337 - Improved the readability of the -solvefaildebug
       constraint contradiction report generated by randomize() calls with
       no solutions. Constraints of the form "my_var inside { random_array
       }" are now printed as-is, instead of being printed as the expansion
       of the elements of "random_array".
     * QSIM-63338 - Improved the readability of the -solvefaildebug
       constraint contradiction report generated by randomize() calls with
       no solutions. Constraints involving constant variables now display
       the name of the constant variable (where possible) instead of an
       obfuscated name (such as "#var#id") for -solvefaildebug=1
       (previously, constant variable names were only preserved with
       -solvefaildebug=2).
     * QSIM-63339 - Implemented a new SystemVerilog constrained-random
       language extension "-svrandext=purecheck". When the "purecheck"
       extension is enabled, calls to class::randomize(null) will not
       invoke pre_randomize() and post_randomize() functions associated
       with the class on which randomize() is invoked. This extension is
       disabled by default.
     * QSIM-62843 - Implemented a new SystemVerilog constrained-random
       language extension "-svrandext=prerandfirst". When the
       "prerandfirst" extension is enabled, the pre_randomize() functions
       of rand dynamic array/queues of class handles will be executed
       prior to registering the constraints of the containing (parent)
       class (normal behavior is from the constraints of the parent class
       to be registered first). This extension is disabled by default.
     * QSIM-64620 - Significantly improved the performance of some
       randomize() calls involving random dynamic arrays/queues that are
       not resized during randomization.
     * QSIM-64439 - Significantly improved the performance of some
       randomize() calls involving constraints that refer to non-random
       unpacked arrays.
     * QSIM-65542 - Significantly improved the performance (reduced
       simulation cpu time) and memory usage (reduced simulation peak
       memory usage) for randomize() calls evaluating solve/before
       constraints specifying a large number of high-prioirty and
       low-priority variables.
     * QSIM-64856 - Concatenation expressions with bit/part-selects are
       now supported within constrant contexts.
   _______________________________________________________________________

   Mixed Language Enhancements in 2020.4
     * VISU-18493 - (source, results) With 2020.3 onwards Symphony analog
       Vector support has been added in visualizer debug support. This
       will break the forward compatibility ( 2020.3 generated design.bin
       cannot be loaded from 2020.2 visualizer) whereas backward
       compatibility will remain intact (2020.2 generated design.bin can
       be loaded from 2020.3 visualizer)
   _______________________________________________________________________

   Document Revision History in 2020.4
     * Revision - Changes - Status/Date
          + 5.9 - Modifications to improve the readability and
            comprehension of the content. Approved by Tim Peeke. All
            technical enhancements, changes, and fixes are listed in this
            document for all products in this release. Approved by Bryan
            Ramirez. - Released/October 2020
          + 5.8 - Modifications to improve the readability and
            comprehension of the content. Approved by Tim Peeke. All
            technical enhancements, changes, and fixes are listed in this
            document for all products in this release. Approved by Bryan
            Ramirez. - Released/September 2020
          + 5.7 - Modifications to improve the readability and
            comprehension of the content. Approved by Tim Peeke. All
            technical enhancements, changes, and fixes are listed in this
            document for all products in this release. Approved by Bryan
            Ramirez. - Released/August 2020
     * Author: In-house procedures and working practices require multiple
       authors for documents. All associated authors for each topic within
       this document are tracked within the document source.
     * Revision History: Released documents maintain a revision history of
       up to four revisions. For earlier revision history, refer to
       earlier releases of documentation which are available on Support
       Center (http://support.mentor.com).



#Mentor Graphics Search Data
#meta="doc.type.documentation.rn,product.version.2020.4,product.id.P11633"

