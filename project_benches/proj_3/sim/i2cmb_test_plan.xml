 <!-- WorkBook Path: C:\Users\turker\Desktop\verification-proj1\project_benches\proj_3\sim\2i2cmb_test_plan.xls -->
 <!-- Date: 1/1/0001 12:01:39 AM -->
<Workbook>
	<Worksheet>
		<Table>
			 <!-- I2CMB Testplan -->
			<Row>
				<Cell>1</Cell>  <!-- # -->
				<Cell>Register </Cell>  <!-- Section -->
				<Cell></Cell>  <!-- Description -->
				<Cell></Cell>  <!-- Link -->
				<Cell></Cell>  <!-- Type -->
				<Cell>1</Cell>  <!-- Weight -->
				<Cell>100</Cell>  <!-- Goal -->
			</Row>
			<Row>
				<Cell>1.1</Cell>
				<Cell>Register Cross-Checking</Cell>
				<Cell>Require that writes to one of three writeable registers does not alter values of other registers, except for commands which alter the FSM-States Register, and status response bits in the CMDR</Cell>
				<Cell>test_reg_crosscheck</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.2</Cell>
				<Cell>Reg. Access Control</Cell>
				<Cell>Expect that writes to read-only regions of registers do not change the values stored at these read-only bits</Cell>
				<Cell>test_reg_accessctrl</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.3</Cell>
				<Cell>Reg. Field Accuracy</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.3.1</Cell>
				<Cell>CMDR[DONE]</Cell>
				<Cell>Expect DONE bit raised when DUT command operation completed</Cell>
				<Cell>assert_done_raised_on_complete</Cell>
				<Cell>Assertion</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.3.2</Cell>
				<Cell>CMDR[NACK]</Cell>
				<Cell>Expect NACK bit raised when no slave response to master request; else low</Cell>
				<Cell>test_disconnected_slave</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.3.3</Cell>
				<Cell>CSR[BB]</Cell>
				<Cell>Expect BB bit raised when selected bus has transaction in progress</Cell>
				<Cell>assert_bb_during_transaction</Cell>
				<Cell>Assertion</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.3.4</Cell>
				<Cell>CSR[BC]</Cell>
				<Cell>Expect BC bit raised on successful bus capture operation.</Cell>
				<Cell>assert_bc_on_bus_capture</Cell>
				<Cell>Assertion</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.3.5</Cell>
				<Cell>CRS[Bus ID]</Cell>
				<Cell>Expect Bus ID bits to match selected bus ID on successful bus capture operation</Cell>
				<Cell>assert_bus_id_match</Cell>
				<Cell>Assertion</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.4</Cell>
				<Cell>Default Register Values</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.4.1</Cell>
				<Cell>CSR Defaults</Cell>
				<Cell>On a DUT &quot;soft reset&quot; with interrupt disabled (Disable-Enable) Expect CSR == 8&#39;b1000_0000, With Interrupt enabled CSR == 8&#39;b1100_0000</Cell>
				<Cell>assert_csr_enable_defaults</Cell>
				<Cell>Assertion</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.4.2</Cell>
				<Cell>DPR Default</Cell>
				<Cell>After &quot;soft reset&quot; expect DPR == 8&#39;h00</Cell>
				<Cell>assert_dpr_default_on_enable</Cell>
				<Cell>Assertion</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.4.3</Cell>
				<Cell>CMDR Default</Cell>
				<Cell>After &quot;soft reset&quot; expect CMDR == 8&#39;b1000_0000</Cell>
				<Cell>assert_cmdr_default_on_enable</Cell>
				<Cell>Assertion</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.4.4</Cell>
				<Cell>FSMR Default</Cell>
				<Cell>After &quot;soft reset&quot; expect FSMR == 8&#39;h00</Cell>
				<Cell>assert_fsmr_default_on_enable</Cell>
				<Cell>Assertion</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>1.5</Cell>
				<Cell>FSM State Reg</Cell>
				<Cell>Expect Byte-Level FSM Register to match most-recently-passed command on completion</Cell>
				<Cell>assert_fsm_byte_match_last_cmd</Cell>
				<Cell>Assertion</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>2</Cell>
				<Cell>Compulsory Tests</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>2.1</Cell>
				<Cell>Base Single-Bus Test</Cell>
				<Cell>Expect completed transactions with single and multiple bytes,both read and write, with both start-stop and start-restart-stop conditions to complete successfully, with single bus configured to default Speed (100kHz)</Cell>
				<Cell>i2cmb_test_single_bus_default</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>2.2</Cell>
				<Cell>Base Multi-Bus Test</Cell>
				<Cell>Expect completed transactions on multiple busses with single and multiple bytes,both read and write, with both start-stop and start-restart-stop conditions to complete successfully, with each bus configured to default Speed (100kHz)</Cell>
				<Cell>i2cmb_test_multi_bus_default</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>2.3</Cell>
				<Cell>Multi-Bus Max Speed Test</Cell>
				<Cell>Expect completed transactions on multiple busses with single and multiple bytes,both read and write, with both start-stop and start-restart-stop conditions to complete successfully, with each bus configured to Maximum Speed (100kHz)</Cell>
				<Cell>i2cmb_test_multi_bus_max</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>2.4</Cell>
				<Cell>Multi-Bus Varying Speeds Test</Cell>
				<Cell>Expect completed transactions on multiple busses with single and multiple bytes,both read and write, with both start-stop and start-restart-stop conditions to complete successfully, with busses configured to a range from (400kHz) to (10kHz)</Cell>
				<Cell>i2cmb_test_multi_bus_range</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>3</Cell>
				<Cell>Arbitration</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>3.1</Cell>
				<Cell>Arbitration Lost</Cell>
				<Cell>In the presence of a simulated multi-master, expect DUT to lose arbitration when BFM writes 1&#39;b1 to sda before master is able to capture bus</Cell>
				<Cell>test_arbitration</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>3.2</Cell>
				<Cell>Arbitration Won</Cell>
				<Cell>In the presence of a simulated multi-master, expect DUT to win arbitration when master writes 1&#39;b1 to sda before BFM injects 1&#39;b1</Cell>
				<Cell>test_arbitration</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>4</Cell>
				<Cell>Clock-Stretching</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>4.1</Cell>
				<Cell>Master-End Clock Stretching</Cell>
				<Cell>Expect transfers to complete when TB delays subsequent operations legally from the WB-interface</Cell>
				<Cell>clockstretch_cg::wb_stretch_delay</Cell>
				<Cell>Coverpoint</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>4.2</Cell>
				<Cell>Slave-End Clock Stretching</Cell>
				<Cell>Expect transfers to complete when TB delays subsequent operations legally from the I2c-interface</Cell>
				<Cell>clockstretch_cg::wb_stretch_delay</Cell>
				<Cell>Coverpoint</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>4.3</Cell>
				<Cell>Both-End Clock Stretching</Cell>
				<Cell>Expect transfers to complete when TB delays subsequent operations legally from both interfaces</Cell>
				<Cell>clockstretch_cg::wb_x_i2c_delay</Cell>
				<Cell>Cross</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>4.3.1</Cell>
				<Cell>Wait Commands</Cell>
				<Cell>Expect transfers to complete when explicit wait commands issues to DUT with subsequent operations</Cell>
				<Cell>clockstretch_cg::explicit_wait_times</Cell>
				<Cell>Coverpoint</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>5</Cell>
				<Cell>Soft Resets and Interrupts</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>5.1</Cell>
				<Cell>Intr-Intr Reset</Cell>
				<Cell>After an Enable-Transfers-Disable-Enable, with interrupts enabled for both enable commands, expect subsequent transfers to complete successfully, with interrupt signal being raised by DUT to signal done</Cell>
				<Cell>test_interrupt_cycling</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>5.2</Cell>
				<Cell>Intr-Poll Reset</Cell>
				<Cell>After an Enable-Transfers-Disable-Enable, with interrupts enabled for first command, and disabled for second &quot;enable&quot; command, expect subsequent transfers to complete successfully, WITHOUT Interrupt signal being raised by DUT to signal done</Cell>
				<Cell>test_interrupt_cycling</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>5.3</Cell>
				<Cell>Poll-Intr Reset</Cell>
				<Cell>After an Enable-Transfers-Disable-Enable, with interrupts DISabled for first command, and ENabled for second &quot;enable&quot; command, expect subsequent transfers to complete successfully, WITH Interrupt signal being raised by DUT to signal done</Cell>
				<Cell>test_interrupt_cycling</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>5.4</Cell>
				<Cell>Poll-Poll Reset</Cell>
				<Cell>After an Enable-Transfers-Disable-Enable, with interrupts DISabled for first command, and DISabled for second &quot;enable&quot; command, expect subsequent transfers to complete successfully, WITHOUT Interrupt signal being raised by DUT to signal done</Cell>
				<Cell>test_interrupt_cycling</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>6</Cell>
				<Cell>Hard Resets</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>6.1</Cell>
				<Cell>Hard rst after transfers</Cell>
				<Cell>When a 133ns reset is raised after a completed transfer, expect subsequent enable-transfer flows to complete successfully</Cell>
				<Cell>test_hard_reset_insertion</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>6.2</Cell>
				<Cell>Hard rst During transfer</Cell>
				<Cell>When a 133ns reset is raised while a transfer is in progress, expect subsequent enable-transfer flows to complete successfully</Cell>
				<Cell>test_hard_reset_insertion</Cell>
				<Cell>test</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>7</Cell>
				<Cell>FSM  Testing</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>7.1</Cell>
				<Cell>Bit-Level FSM</Cell>
				<Cell>Expect bit-level FSM values in FSM Register to match most-recently-issued bit-level transaction</Cell>
				<Cell>assert_fsm_bit_match_last_cmd</Cell>
				<Cell>Assertion</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>8</Cell>
				<Cell>Code Coverage</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>8.1</Cell>
				<Cell>RTL Core</Cell>
				<Cell>Require that all DUT units have 100% statement coverage and 100% branch coverage</Cell>
				<Cell>/top/DUT</Cell>
				<Cell>Instance</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>9</Cell>
				<Cell>Protocol Testing</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>9.1</Cell>
				<Cell>Coverage Covergroup</Cell>
				<Cell>Ensure all coverpoints within primary TB covergroup reach full coverage</Cell>
				<Cell>coverage_cg</Cell>
				<Cell>Covergroup</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>9.2</Cell>
				<Cell>Addresses</Cell>
				<Cell>Ensure all addresses have been selected and used for successful transfers</Cell>
				<Cell>coverage_cg::address</Cell>
				<Cell>Coverpoint</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>9.3</Cell>
				<Cell>Data Values</Cell>
				<Cell>Ensure all possible data values have been selected and used for successful transfer</Cell>
				<Cell>coverage_cg::data</Cell>
				<Cell>Coverpoint</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>9.4</Cell>
				<Cell>Bus Selection</Cell>
				<Cell>Ensure all bus selections have been tested</Cell>
				<Cell>coverage_cg::bus_sel</Cell>
				<Cell>Coverpoint</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>10</Cell>
				<Cell>WB Protocol Testing</Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell></Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>10.1</Cell>
				<Cell>WB Command Coverage</Cell>
				<Cell>Ensure cmd coverg</Cell>
				<Cell>wb_transaction_cg::cmd_type</Cell>
				<Cell>Coverpoint</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
			<Row>
				<Cell>10.2</Cell>
				<Cell>WB Register Coverage</Cell>
				<Cell>Ensure reg coverg</Cell>
				<Cell>wb_transaction_cg::reg_type</Cell>
				<Cell>Coverpoint</Cell>
				<Cell>1</Cell>
				<Cell>100</Cell>
			</Row>
		</Table>
	</Worksheet>
</Workbook>
