The process of merging UCDBs files or coverstore tests (coverstore's were 
introduced in 10.4) generated from simulations can be a time consuming task 
especially if done once all tests are available. Using "vcover merge" 
produces a linear relationship with time, the number of tests and the number 
of coverage bins involved in the coverage model. Merging ten tests with a 
constant coverage model will take approx twice as long as merging five tests. 
The merge process has been architected to allow any number of tests to be 
merged together and any number of merged test sets to be merged together to 
produce a final result. This means that it is a process that can benefit 
from the ability to run merges in parallel to improve the overall merge time.

Questa's Verification Run Management (VRM) system not only allows
regressions to be captured, controlled, run and managed but it also
allows any actions to be automated. As well as this ability to automate
it also has in-built merging technology and grid integration. Any user
of VRM is able to benefit from an intelligent merge capability that triggers
merging based on the results of simulations and tasks as the
regression is running. This means that at the end of the regression
run the VRM user has a UCDB file or coverstore merged with all the
information they require for analysis. Some of this inbuilt intelligence
can also be used by users who do not use VRM to run their regressions. The
examples in this directory show how the provided configuration file or
RMDB can be used to enable the user to carry out parallel merging
automatically on a list of UCDB files or coverstore tests or a list can be
generated by searching a certain directory or directory structure.

REQUIREMENTS

There are a couple of requirements for the set-up and successful use
of the parallel merge process. Firstly you will require the running of
VRM, this is a standard part of the Questa install but requires a
license feature called 'qvrm'. The feature is available with Questa SV
and ABV, Questa Prime and Ultra or as an option to Questa Core called
Questa Verification Management. Next you will require access to the 
'parallel_merge.rmdb' file which is the Run Manager Database file with the
configuration to use VRM to do the parallel merge. This file can be 
found in the vm_src/parallel_merge directory of the install, it can be
placed within the directory that you are working or pointered to using
the -rmbd switch of 'vrun' (the VRM executable).

MODES OF OPERATION

The parallel merge process can be run in three main modes of operation and
the examples directory has an example of each of them at
examples/vrm/parallel-merge. These modes are as follows with the directory
 holding further details and instructions;

Directory         Mode

multi-core        Run Locally on a machine with multiple cores available.
remote-shell      Run using rsh to remotely execute merges on defined machines.
grid              Run using grid software such as SGE (Sungrid) or LSF.

DESCRIPTION OF THE PARALLEL MERGE PROCESS

There are three stages to the parallel merge process as configured in the 
supplied RMDB file. Firstly a UCDB file list or coverstore test list is built
or supplied that contains a list of UCDB files or tests to be merged. Next the
original file list is split into a certain number of level one merges, depending
on parameters set in the RMDB this split of the complete job will run either
locally, via remote shell or on a grid. Lastly the merges generated by the level
one merges are managed by VRMs auto-merge algorithm that generates merge processes
from the merged databases that are added to its merge queue as the first level
merges are completed. 

If the list filename is supplied then the UCDB files and their full absolute paths
or the test index and full coverstore path need to appear one per line of the text
file. If the file list is to be built then the user is able to set a directory path
with the parameter UCDBDIR and a search name with the parameter UCDBFILENAMES when 
merging UCDB files, and a COVERSTORES parameter that will list the coverstores to
merge by generating a list of tests. By default the search directory
is set to the current directory, and the search string is set to Test*.ucdb.
All files found recursively from this directory will be added into the file
list as the UCDBs that need to be merged. If set to coverstore each of the coverstores
are searched from tests, and they are added to the list. Another parameter called
TESTSTATUS can then be set to one of three values, all, failed or passed. This
causes a parse of all the UCDBs in the file list or test in the coverstores to build
a new list for merging based on the TESTSTATUS in the test record of each test. All
means all tests will be added to the list used, passed means only the TESTSTATUS
results of Note and Warning will be added to the list and finally failed means that only
TESTSTATUS results of Error and Fatal will be used.

Once the file list has been built the next stage is to split the list into
level one merges. The number used to list the list depends on the mode of
operation. For a mode of local and grid the number of jobs that the list is
split into is set by the JOBS parameter. For a mode of rsh the number of jobs
is set by the number of entries in the HOSTNAMES parameter. Once the complete
job has been split into the number of jobs required then the level one merges
are launched using the method set by the MODE parameter. The actual number of
jobs launched can be further controlled by the -j switch when using local mode,
when using a grid the parameter GRIDSLOTS controls the number of jobs that
will run concurrently.

When the level one merges complete a merge file or coverstore will be generated and
the ucdbfile parameter will be used to communicate with VRM that the level one merge
is ready to be merged with the other results. VRM's auto-merge then takes over to ensure
that all the resulting merged tests from the level one merges are merged into
the final merge file. The parameter MERGEOPTIONS can be set to add additional 
switches to the vcover merge process.

GETTING STARTED

One way to start with the parallel merge is to use the ask system feature of VRM 
to step throught the set-up. This can be done by adding the -ask switch to the 
start of the merge process which will cause vrun to interactively halt and ask
for the answers to various questions to set up the merge. Also adding the -noexec
switch will cause no execution of the parallel merge hence the full command line
can be built and used when you are ready to do the merge process.

vrun merge -rmdb /install/questasim/vm_src/parallel_merge/parallel_merge.rmdb -ask -noexec

When the process is complete a command line set-up will be printed to the screen
to use the next time the merge process needs to be run.

DETAILS AND DEFINITION OF THE CONTROL PARAMETERS IN THE RMDB

"SRCCOVERAGE" valid values are "UCDB" or "CoverStore", default "UCDB" - This controls the
type of coverage source that will be merged. Tests can be stored in regular UCDB files or
a CoverStore. This allows the process to set the correct switches for the merge of the
different inputs.

"MODE" valid values "local", "rsh", "lsf" or "sge", default "rsh" -
This controls what system the process will use to run the merge tasks.

"GENFILELIST", valid values "yes" or "no", default "yes" - This can be
set to either "yes" or "no" and controls if a "filelist" is generated
before the merge process starts. If this is set to "yes" then the
parameters UCDBDIR and UCDBFILENAMES are used see below.

"LISTFILENAME", set to valid filename, default "parallellist" - This controls
the name of the 'list' filename that is read and used as the list
of files to be merged.

"LISTPATH", set to valid path, default (%VRUNDIR%) which is the directory that vrun
is run from - This allows the path of the list to be changed, the
path needs to be absolute. The default is to take the LISTFILENAME filename
and locate it in the directory that the you run vrun.

"TESTSTATUS", valid values "all", "passed" or "failed", default "all"
- This can be used to optimize the supplied filelist to only merge
passes or failures. When set to passes UCDBs with a TESTSTATUS of
"ok" or "warning" will be merged, when set to failures tests with a
TESTSTATUS of "error" or worse will be merged. The default is to merge
all UCDBs in the filelist.

"UCDBDIR", set to valid pathname, default (%VRUNDIR%) - This controls
the directory that will be used to search recursively for UCDB files
to generate the 'filelist'. It defaults to the absolute path that vrun is run
from. This is only used when the SRCCOVERAGE parameter is set to UCDB.

"UCDBFILENAMES", set to valid filename search, default "Test*.ucdb" -
This controls the match that will be used to location the UCDB files
in UCDBDIR. This is only used when the SRCCOVERAGE parameter is set to UCDB.

"COVERSTORES", set to a list of CoverStores that will be used as input
to the merge process, defaults to (%VRUNDIR%)/CoverStore. Each CoverStore 
should be defined with its full path with a space seperating each CoverStore.
This list will to used to generate the test list used as input to the 
merge process.

"QUEUETIMEOUT", this value is used for time-outs and is measured between
the time that a merge action is launched to the time it actual starts
to execute. This is all managed automatically and if the queueing time
over runs the QUEUETIMEOUT value the actions will be seen as failed
and the system will no longer wait for the action to be started. This
needs to be set to the maximum time you would be prepared to wait before
assuming that a merge action will not run for some reason, it defaults to 
6000 seconds.

"MERGETIMEOUT", this value is used for time-outs and is measured between
the time that a merge action starts to the time the action finishes.
This is all managed automatically and if the run time
over runs the MERGETIMEOUT value the actions will be seen as failed
and the system will no longer wait for the action to be started. This
needs to be set to the maximum time you would expect the longest merge
operation to take plus some buffer time, it defaults to 6000 seconds.

"MERGEMODE", this value controls the merge mode and must be either
"-totals", or "-testassociated", default "-totals" - This controls
whether per-test coverage counts are preserved in the merged UCDB.

"MERGEFILE", set to valid basename, default "merge" -
This controls the name of the merge output that will be produced from
the merge process. The output will be written in the directory that
the process is run with the basename defined.

"MERGEOPTIONS", set to valid switches for vcover merge, default
"(%MERGEMODE%)" - this controls the switches that should be added to
the vcover merge process. It gives the user the opportunity to add
additional switches used in their flow.

"COMMANDLINE", this is an internal parameter do not change - It is
used to work out the command line used to run the current merge process.
The command line is printed as part of the run to make it easy to repeat
another parallel merge with the same parameters set. This is useful in the
-ask switch has been used on the first time and the parameters have
been set interactively.

"DATABASES", special parameter do not change - This calculates the
number of databases to merge by opening the 'filelist' and counting
the UCDB files.

"GROUPS", special parameter do not change - This calculates the number
of first level merges that are required and will depend on the mode of
the merge and the number of databases to merge. If 'rsh' mode is set
then the number of groups will be the number of hosts listed in the
HOSTNAMES parameter. If the number of databases to merge is less than
1 times the number of HOSTNAMES then the number of groups will be
reduced to ensure that there are no groups with zero databases. If one
of the grid modes is selected then the groups are calculated from the
JOBS parameter.

"HOSTNAMES", set to a list of valid hosts, default "dvtvnc9 dvtvnc10
dvtvnc11 dvtvnc9 dvtvnc10 dvtvnc11" - This controls the hosts that
will accept the 'rsh' jobs. It should be set to a list separated by
spaces or commas. Including the name of the host in the list twice
means that multiple jobs can be run on the host. This is useful for
multi CPU hosts where you want to run more than single first level
merges.

"HOST", special parameter do not change - This is used to generate a
hostname for each 'rsh' process. It is used by each first level merge
as well as the merge processes generated by VRM when the first level
merges start to complete.

"RSHJOBS", special parameter do not change - This is used to generate
the number of 'rsh' jobs based on the number of HOSTNAMES available,
it is passed into the GROUPS parameter to calculate the number of
groups to generate for first level merges.

"JOBS", set to the number of jobs that the merge should be split
into default "10" for grid and "2" for local mode - This controls
the number of grid jobs you want the merge process to be split into
when using one of the grid modes or local mode.

"GRIDLSLOTS", set to the number of slots that are to be used on the grid,
this sets the maximum number of running jobs on the method, and therefore
the number of parallel merge actions that will be running in parallel 
on the grid.

"USERGRIDOPTS", set to the options switches that the user wants to add to
the submission command. i.e. for the setting of queues or the resources
that need to be used.

"PRINTCOMMAND", defaults to "yes". - This controls the printing of the
configuration information of the current run on the parallel merge. This 
is used if the same settings need to be used to reproduce the parallel
merge.

See each of the example directories for a runnable example of each type
of parallel merge. The RMDB from the install is a starting point and
with knowledge of the VRM system can be modified to customize if
required. The directories are multi-core, remote-shell and grid.
Change into one of these to run the example you are interested in using.

