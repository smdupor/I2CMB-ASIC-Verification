import cgi, glob, hashlib, logging, os, rmdbdata, shutil, tarfile, tempfile, tempita, time, vrmutils

from contextlib import closing, contextmanager

#
# Create a temporary directory
#
@contextmanager
def temp_directory(*args, **kwargs):
    dir = tempfile.mkdtemp(*args, **kwargs)

    try:
        yield dir
    finally:
        shutil.rmtree(dir)

#
# Perform an operation inside a working directory
#
@contextmanager
def working_directory(dir):
	prevdir = os.getcwd()

	os.chdir(os.path.expanduser(dir))

	try:
		yield
	finally:
		os.chdir(prevdir)

#
# Generate a filename containing an expanded regression suite
#
# Inputs:
#   filename := the name of the tarfile to generate
#   datafile := name of the data file
#   template := optional name of the source template directory
#
# Returns:
#   Nothing
#
# This function yields to the caller, passing the absolute path to the
# generated tarfile. When the yield returns, the temporary directory is
# deleted.
#
@contextmanager
def generate_suite(filename, datafile, template = None):

	# Load the datafile, if any
	data = rmdbdata.RmdbData(datafile)

	# Find the template directory

	srcdir = vrmutils.find_template_dir(template if template else data.get('template'))

	# Construct a data dictionary to be used in template expansion

	vars = dict(
		get  = lambda key: data.get(key, ''),
		esc  = lambda str: cgi.escape(str),
	)

	# Perform the actual generation within a temporary directory

	with temp_directory(prefix = 'vrmedit') as tempdir:
		logging.debug('Generating from %s to %s', srcdir, tempdir)

		with working_directory(tempdir):
			tarpath = os.path.abspath(os.path.join(tempdir, filename))

			# Create a new tarfile and close it when the block ends

			with closing(tarfile.open(tarpath, 'w')) as tar:

				# Iterate all template files (under <template>/files)

				for file in glob.glob(os.path.join(srcdir, 'files', '*')):
					if not os.path.basename(file) == 'data.json':
						template = tempita.Template.from_filename(file, namespace = vars)

						logging.debug('...generating %s', os.path.basename(file))

						with open(os.path.basename(file), 'w') as f:
							if file.endswith('.rmdb'):
								text = template.substitute()# + '<!--\n%s\n-->\n' % data.to_string()
								# Tack generation metadata, SHA1 checksum, and input data onto the RMDB file
								#   (check with "head --lines=-1 | shasum")

								endstuff = tempita.Template('<!-- Generated by Regression Author (RAuth) at {{time}} ({{cksum}}) -->\n')

								f.write(text + endstuff.substitute(cksum = hashlib.sha1(text).hexdigest(), time = time.asctime()))

							else:
								f.write(template.substitute())

						if not file.endswith('testlist') or data.get('testlist.source') == 'content':
							tar.add(os.path.basename(file))

		yield tarpath

#
# Main routine -- called only if the generator was invoked stand-alone
#
if __name__ == '__main__':

	import getopt, rmdbdata, shutil, sys

	def send_help(exit_code, message = ''):
		if message:
			logging.error(message)

		print 'python', sys.argv[0], '<options>'
		print '  (-h | --help)                 Print this help message'
		print '  (-d | --data) <datafile>      Base name of data file'
		print '  (-t | --template) <template>  Name of, or path to, template'
		print '  (-o | --outfile) <name>       Name of generated file (defaut: output.tar)'

		sys.exit(exit_code)

	arg_outfile  = 'output.tar'

	arg_data     =  None
	arg_template =  None

	try:
		opts, args = getopt.getopt(sys.argv[1:], 'd:ho:t:',['data=', 'help', 'outfile=', 'template='])

	except getopt.GetoptError as e:
		send_help(2, e.msg)

	for opt, arg in opts:
		if opt in ('-h', '--help'):
			send_help(0)

		elif opt in ('-d', '--data'):
			arg_data = arg

		elif opt in ('-o', '--outfile'):
			arg_outfile = arg

		elif opt in ('-t', '--template'):
			arg_template = arg

	# We need both a template and a data file

	if arg_data is None:
		send_help(1, 'Data file not specified')

	if arg_template is None:
		send_help(1, 'Template name/path not specified')

	# Generate the tarfile and copy it to the current directory

	with generate_suite(arg_outfile, arg_data, arg_template) as filename:
		logging.debug('...copying %s to current directory', os.path.basename(filename))

		shutil.copyfile(filename, os.path.basename(filename))
