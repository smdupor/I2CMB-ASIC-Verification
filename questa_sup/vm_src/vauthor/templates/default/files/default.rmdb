<?xml version="1.0" ?>
<rmdb version="1.0" toprunnables="regression" options="
{{py: regression = get('regression')}}
-j {{get('j')}}
{{if regression['autoclean']}}
 -clean
{{endif}}
{{if regression['autodelete']==''}}
 -noautodelete
{{endif}}
{{if regression['automerge']['enabled']==''}}
 -noautomerge
{{endif}}
{{if regression['autotriage']['enable']==''}}
 -noautotriage
{{endif}}
 {{if regression['autotrend']['enable']==''}}
 -noautotrend
{{endif}}
{{py: html = get('report.html')}}
{{if html['enable'] == 'on'}}
 -html -htmldir {{html['htmldir']}}
{{endif}}
{{if html['cov']=='on'}}
 -covreport
 {{if html['details']=='on' or html['source']=='on' or html['showexcluded']=='on' or html['testhit']=='on' or html['testrecord']=='on'}}
 -covreportopts &quot;
{{if html['details']=='on'}}
 -details
{{endif}}
{{if html['source']=='on'}}
 -source
{{endif}}
{{if html['showexcluded']=='on'}}
 -showexcluded
{{endif}}
{{if html['testhit']=='on'}}
 -testhitdata
{{endif}}
{{if html['testrecord']=='on'}}
 -testdetails
{{endif}}
{{html['addopt']}}
&quot;
{{endif}}
{{endif}}
" loadtcl="default">
  <runnable name="regression" type="group" sequential="yes">
{{py:
def getMergeOptns(regression):
	if regression['automerge']['totals']:
		return '-totals'
	else: 
		return '-testassociated'
}}
    <parameters>
      {{py: parameters = get('regression.parameters')}}
      {{for parameter in parameters}}
      <parameter name="{{parameter['name']}}" type="{{parameter['type']}}" {{if parameter['export'] == "1"}} export="yes" {{endif}}>{{esc(parameter['value'])}}</parameter>
      {{endfor}}
      {{py: specialparams = get('specialparams')}}
      {{if regression['automerge']['enabled']}}
      <!--
           mergefile parameter enables tests auto-merge.
           mergeoptions parameter specify options for the merge
           coverstore parameter specifies where to place merging coverstrores
           -->
      <parameter name="mergefile">{{esc(specialparams['mergefile'])}}</parameter>
      <parameter name="mergeoptions"> {{esc(getMergeOptns(regression))}} {{esc(specialparams['mergeoptions'])}}</parameter>
      {{if regression['automerge']['coverstore']}}
      <parameter name="coverstore">{{esc(specialparams['coverstore'])}}</parameter>
      {{endif}}
      {{if regression['automerge']['tplan']}}
      <!--
           tplanfile parameter specifies the location of the testplan file
           tplanoptions specifies options for merging the testplan
           -->
      <parameter name="tplanfile">{{esc(specialparams['tplanfile'])}}</parameter>
      <parameter name="tplanoptions">{{esc(specialparams['tplanoptions'])}}</parameter>
      {{endif}}
      {{endif}}
      {{if regression['autotriage']['enable']}}
      {{py: teststatus = ''}}
      {{if regression['autotriage']['alltest']}}
        {{py: teststatus = '-teststatusAll'}}
      {{else}}
        {{if regression['autotriage']['passtest']}}
          {{py: teststatus = teststatus + 'WP'}}
        {{endif}}
        {{if regression['autotriage']['failtest']}}
          {{py: teststatus = teststatus + 'FE'}}
        {{endif}}
        {{if teststatus}}
          {{py: teststatus = '-teststatus ' + teststatus}}
        {{endif}}
      {{endif}}
      {{py: severity = ''}}
      {{if regression['autotriage']['allsev']}}
        {{py: severity = '-severityAll'}}
      {{else}}
        {{if regression['autotriage']['notesev']}}
          {{py: severity = severity + 'N'}}
        {{endif}}
        {{if regression['autotriage']['errsev']}}
          {{py: severity = severity + 'E'}}
        {{endif}}
        {{if regression['autotriage']['warnsev']}}
          {{py: severity = severity + 'W'}}
        {{endif}}
        {{if severity}}
          {{py: severity = '-severity ' + severity}}
        {{endif}}
      {{endif}}
      {{py: transfile = ''}}
      {{if regression['autotriage']['transfile']}}
        {{py: transfile = '-rulesfile ' + regression['autotriage']['transfile']}}
      {{endif}}
      <!--
           triagefile specifies the triage file location
           triageoptions specifies traiging options
           -->
      <parameter name="triagefile">{{esc(specialparams['triagefile'])}}</parameter>
      <parameter name="triageoptions">{{esc(teststatus)}} {{esc(severity)}} {{esc(transfile)}} {{esc(specialparams['triageoptions'])}}</parameter>
      {{endif}}
      {{if regression['autotrend']['enable']}}
      <!--
           trendfile specifies the location of the trend file
           trendoptions specifies the trending options
           -->
      <parameter name="trendfile">{{esc(specialparams['trendfile'])}}</parameter>
      <parameter name="trendoptions">{{esc(specialparams['trendoptions'])}}</parameter>
      {{endif}}
      {{if regression['autodelete']}}
      <parameter name="nodelete">{{esc(specialparams['nodelete'])}}</parameter>
      {{endif}}
{{py: email = get('report.email')}}
{{if email['enable']=='on'}}
{{py: msgpar = ""}}
{{py: msgs = email['msg']}}
{{for msg in msgs}}
{{py: msgpar = msgpar + msg + "\n"}}
{{endfor}}
      <!--
           EMAIL_MESSAGE specifies the message to be sent to the mailing list
           EMAIL_RECIPIENTS specifies the mailing list
           EMAIL_SERVERS specifies the server used for sending mails
           EMAIL_SUBJECT specifies the subject of the sent mail
           -->
      <parameter name="EMAIL_MESSAGE">{{esc(msgpar)}}</parameter>
      <parameter name="EMAIL_RECIPIENTS">{{esc(email['add'])}}</parameter>
      <parameter name="EMAIL_SERVERS">{{get('mail.server')}}</parameter>
      <parameter name="EMAIL_SUBJECT">{{esc(email['sub'])}}</parameter>
{{py: esection = ""}}
{{if email['pfs']=='on'}}
{{py: esection = esection + " apf"}}
{{endif}}
{{if email['cs']=='on'}}
{{py: esection = esection + " cpl"}}
{{endif}}
{{if email['es']=='on'}}
{{py: esection = esection + " exe"}}
{{endif}}
{{if email['gs']=='on'}}
{{py: esection = esection + " gen"}}
{{endif}}
{{if email['ucdbs']=='on'}}
{{py: esection = esection + " sim"}}
{{endif}}
      <!--
           EMAIL_SECTIONS specifies the content of the message be sent to the mailing list
           -->
      <parameter name="EMAIL_SECTIONS">{{esc(esection)}}</parameter>
{{endif}}
    </parameters>
    <members>
      <member>Compile</member>
      <member>Simulate</member>
{{if (get('report.email.enable') =='on' or get('report.html.enable') == 'on' or get('report.trend.enable') == 'on') and get('report.parameters') or get('report.addopt.enable') == 'on' }}
      <member>Report</member>
{{endif}}      
    </members>
    {{py: trendreport = get('report.trend')}}
    {{if (trendreport['enable'])}}
      {{py: trendoptions = "vcover report -trend -" + trendreport['format'] + " " + trendreport['addopt']}}
      {{if trendreport['date1']}}
        {{py: trendoptions = trendoptions + " -from " + trendreport['date1']+"000000"}}
      {{endif}}
      {{if trendreport['date2']}}
        {{py: trendoptions = trendoptions + " -to " + trendreport['date2']+"235959"}}
      {{endif}}
      {{if trendreport['format']=='html'}}
        {{if trendreport['graph']=='line'}}
          {{py: trendoptions = trendoptions + " -linegraph"}}
        {{endif}}
        {{py: trendoptions = trendoptions + ' -htmldir "' + trendreport['dir'] + '"'}}
      {{else}}
        {{py: trendoptions = trendoptions + ' -file "' + trendreport['dir'] + '"'}}
      {{endif}}
      {{py: trendoptions = trendoptions + ' "' + specialparams['trendfile'] + '"'}}
      <!--
           trendScript is overriden to account for generating the trend reports
           -->
    <trendScript>
      <command>set trendfile (%trendfile%) </command> 
	  <command>set cmd [list vcover merge -trend (%trendoptions:%) -out $trendfile] </command>
	  <command>if {[file readable $trendfile]} {lappend cmd $trendfile} </command>
	  <command>eval $cmd (%mergefile%) </command>
      <command>{{esc(trendoptions)}}</command>
    </trendScript>
    {{endif}}
  </runnable>
  <runnable name="Compile" type="task">
{{py: gridtype = get('grid.gridtype')}}
{{py: gridname = ""}}
{{py: command = ""}}
{{if gridtype == "1"}}
{{py: gridname = "lsf"}}
{{py: command = "bsub"}}
{{elif gridtype == "2"}}
{{py: gridname = "sge"}}
{{py: command = "qsub"}}
{{elif gridtype == "3"}}
{{py: gridname = "uge"}}
{{py: command = "qsub"}}
{{elif gridtype == "4"}}
{{py: gridname = "rtda"}}
{{py: command = "nc run"}}
{{endif}}
{{py: comgrid = get('compile.grid')}}
{{if comgrid == "on"}}
  {{py: comqueue = get('compile.queue')}}
  {{if comqueue}}
  {{py: comcommand = command + " -q " +comqueue}}
  {{else}}
  {{py: comcommand = command}}
  {{endif}}
      <!--
           Using grid to do the compilation
           -->
    <method name="grid" gridtype="{{gridname}}" action="execScript" mintimeout="{{get('grid.timeout')}}" maxrunning="{{get('grid.maxrun')}}">
      <command>{{comcommand}} {{get('grid.gridopts')}} (%WRAPPER%)</command>
    </method>
 {{endif}}
    {{py: parameters = get('compile.parameters')}}
    {{if parameters}}
    <parameters>
      {{for parameter in parameters}}
      <parameter name="{{parameter['name']}}" type="{{parameter['type']}}" {{if parameter['export'] == "1"}} export="yes" {{endif}}>{{esc(parameter['value'])}}</parameter>
      {{endfor}}
    </parameters>
    {{endif}}
    {{py: source = get('compile.source')}}
    {{if source == 'path'}}
    <execScript mintimeout="{{get('compile.timeout')}}" launch="{{get('compile.launch')}}" file="{{get('compile.path')}}">
    {{else}}
    <execScript mintimeout="{{get('compile.timeout')}}" launch="{{get('compile.launch')}}">
      {{py: commands = get('compile.commands')}}
      {{for comm in commands}}
	{{if comm.strip()}}
      <command>{{esc(comm)}}</command>
	{{endif}}
      {{endfor}}
    {{endif}}
    </execScript>
  </runnable>
  <runnable name="Simulate" type="group">
{{py: simgrid = get('simulate.grid')}}
{{if simgrid == "on"}}
  {{py: simqueue = get('simulate.queue')}}
  {{if simqueue}}
  {{py: simcommand = command + " -q " +simqueue}}
  {{else}}
  {{py: simcommand = command}}
  {{endif}}
      <!--
           Using grid to do the simulation
           -->
    <method name="grid" gridtype="{{gridname}}" action="execScript" mintimeout="{{get('grid.timeout')}}" maxrunning="{{get('grid.maxrun')}}">
      <command>{{simcommand}} {{get('grid.gridopts')}} (%WRAPPER%)</command>
    </method>
 {{endif}}
    {{py: parameters = get('simulate.parameters')}}
    {{if parameters}}
    <parameters>
      {{for parameter in parameters}}
      <parameter name="{{parameter['name']}}" type="{{parameter['type']}}" {{if parameter['export'] == "1"}} export="yes" {{endif}}>{{esc(parameter['value'])}}</parameter>
      {{endfor}}
    </parameters>
    {{endif}}
    <members>
      <member>test</member>
    </members>
    {{py: source = get('simulate.source')}}
    {{if source == 'path'}}
    <execScript mintimeout="{{get('simulate.timeout')}}" launch="{{get('simulate.launch')}}" file="{{get('simulate.path')}}">
    {{else}}
    <execScript mintimeout="{{get('simulate.timeout')}}" launch="{{get('simulate.launch')}}">
      {{py: commands = get('simulate.commands')}}
      {{for command in commands}}
       {{if command.strip()}}
      <command>{{esc(command)}}</command>
      {{endif}}
      {{endfor}}
    {{endif}}
    </execScript>
  </runnable>
  {{py: source = get('testlist.source')}}
  {{if source == 'path'}}
  <runnable name="test" type="task" testlist="{{get('testlist.path')}}" />
  {{elif source == 'content'}}
  <runnable name="test" type="task" testlist="testlist" />
  {{endif}}
  {{py: parameters = get('report.parameters')}}
  {{py: addopts = get('report.addopt')}}
{{if (email['enable']=='on' or html['enable'] == 'on' or trendreport['enable'] == 'on') and parameters or addopts['enable'] == 'on' }}
  <runnable name="Report" type="task">
    {{if parameters}}
    <parameters>
      {{for parameter in parameters}}
      <parameter name="{{parameter['name']}}" type="{{parameter['type']}}" {{if parameter['export'] == "1"}} export="yes" {{endif}}>{{esc(parameter['value'])}}</parameter>
      {{endfor}}
    </parameters>
    {{endif}}
    {{if addopts['enable'] == 'on' }}
    {{py: source = addopts['source']}}
    {{if source == 'path'}}
    <execScript launch="{{get('report.launch')}}" file="{{addopts['path']}}">
    {{else}}
    <execScript launch="{{get('report.launch')}}">
      {{py: commands = addopts['commands']}}
      {{for command in commands}}
      {{if command.strip()}}
      <command>{{esc(command)}}</command>
      {{endif}}
      {{endfor}}
    {{endif}}
    </execScript>
    {{endif}}
  </runnable>
  {{endif}}
  <usertcl name="default">
   {{if regression['autodelete']}}
      <!--
          Deleting files for passing tests
           -->
    proc OkToDelete {userdata} {
      upvar $userdata data

      if {$data(RUNNABLE) ne "test"} {
        return 0
      }

      switch -- $data(passfail) {
        passed  -
        skipped -
        killed  -
        empty   {return 1}
        default {return 0}
      }
    }
    {{endif}}

    {{if regression['automerge']['enabled'] and  regression['automerge']['all']}}
      <!--
           Allowing merging all tests
           -->
    proc OkToMerge {userdata} {
      return 1
    }
    {{endif}}

    {{if regression['autotriage']['enable'] and (regression['autotriage']['alltest'] or regression['autotriage']['passtest']) }}
      <!--
           Allowing autotriage for passing tests
           -->
    proc OkToTriage {userdata} {
      return 1
    }
    {{endif}}
  </usertcl>
</rmdb>
