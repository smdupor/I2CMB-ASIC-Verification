<div class="page-wrapper">
	<div class="row">
	    <div class="col-lg-12">
	    </div>
	</div>
{{py:

def btnyes(on):
    if on:
        return "btn-primary active"
    else:
        return "btn-default"

def btnno(on):
    if on:
        return "btn-default"
    else:
        return "btn-primary active"

def radioyes(on):
    if on:
        return "checked"
    else:
        return ""

def radiono(on):
    if on:
        return ""
    else:
        return "checked"

def collapsed(on):
    if on:
        return "in"
    else:
        return ""

def vis(on):
    if on:
        return ""
    else:
        return "none"

def compare(str1,str2):
    return (str1 == str2)

def hide(on):
    if on:
        return "hidden"
    else:
        return ""

}}

<!-- begin paramters -->
{{py:
import tempita, params_table, help
parameters = get('simulate.parameters')
regparameters = get('regression.parameters')
speparameters = get('specialparams')
specialMessages = gethelp('specialparamshelp')
com_params_table = params_table.get_params_table('sparam', 'simulate', parameters, regparameters, speparameters, specialMessages)
}}
 <include>{{com_params_table}}</include>
    <!-- end paramters -->
	
	<!-- begin simulate setup-->
{{py:
simulatehelp = gethelp('simulatehelp')
gridhelp = help.get_help_message("simulategrid", simulatehelp['gridhelp']['title'], simulatehelp['gridhelp']['message'])
timeouthelp = help.get_help_message("simulatetimeouthelp", simulatehelp['timeouthelp']['title'],  simulatehelp['timeouthelp']['message'])
sourcehelp = help.get_help_message("simulatesourcehelp", simulatehelp['sourcehelp']['title'],  simulatehelp['sourcehelp']['message'])
commandshelp = help.get_help_message("simulatecommandshelp", simulatehelp['commandshelp']['title'],  simulatehelp['commandshelp']['message'])
}}

	<div class="row">
		<div class="col-lg-12">
	    <div class="panel panel-info">
	        <div class="panel-heading">
	            <h3 class="panel-title">Simulate Setup</h3>
	        </div>
	        <div class="panel-body">
	            <form class="form-horizontal" method="post" role="form" id="simulate-form">
{{py: simgrid = get('simulate.grid')}}
	                <div class="form-group">
	                    <label class="control-label col-sm-2">Where to Execute<br/><include>{{gridhelp}}</include></label>
	                    <div id="grid-radio-div" class="col-sm-10 btn-group "  style="margin-top: 10px;" data-toggle="buttons">
	                        <label class="btn {{btnno(simgrid)}}" data-target="#sel-queue">
	                            <input type="radio" name="grid-radio" value="on" {{radiono(simgrid)}}>Locally
	                        </label>
	                        <label class="btn {{btnyes(simgrid)}}" data-target="#sel-queue">
	                            <input type="radio" name="grid-radio" value="" {{radioyes(simgrid)}}>Grid
	                        </label>
	                    </div>
	                </div>
{{py: queues = get('grid.queues')}}
{{py: simqueue = get('simulate.queue')}}
	                <div id="sel-queue" class="form-group" style="margin-top: -10px; display:{{vis(simgrid)}};">
	                    <label class="col-sm-2 control-label" style="font-weight: normal;">Select Queue</label>
	                    <div class="col-sm-3">
	                        <div class="checkbox">
	                            <select name="sim-available-queues" class="form-control">
					<option {{if simqueue == ""}} selected {{endif}}>No Queue Selected</option>
					{{for queue in queues}}
	                                <option {{if simqueue == queue}} selected {{endif}}>{{queue}}</option>
					{{endfor}}
	                            </select>
	                        </div>
	                    </div>
			    <a id="simulate-global" style="line-height: 3.5em;" data-target="#home-panel" href="pages/global.htm" onclick="if (suiteEditted)return ConfirmMove('pages/global.htm'); else return navigatePanel(this)">Grid Settings</a>
	                </div>
	                <div class="form-group" style="margin-top: -10px;">
	                    <label class="col-sm-2 control-label">Execution Timeout<br/><include>{{timeouthelp}}</include></label>
	                    <div class="col-sm-10">
	                        <div>
	                            <input name="simutimeo" class="form-control paramRef" value="{{get('simulate.timeout')}}" style="margin-top: 10px;">
	                            <span class="help-block"><small>Maximum amount of time VRM will allow a job to run before killing it</small></span>
	                        </div>
	                    </div>
	                </div>
	                <div class="form-group">
	                    <label class="col-sm-2 control-label">What would you like to do<br/><include>{{sourcehelp}}</include></label>
	                    <div class="col-sm-10">
	                        <div class="radio">
	                            <label class="radio inline">
	                                <input type="radio" name="source" value="path" {{radioyes(compare(get('simulate.source'),'path'))}}>Use existing simulation script.
	                            </label>
	                        </div>
	                        <div class="radio">
	                            <label>
	                                <input type="radio" name="source" value="commands"  {{radioyes(compare(get('simulate.source'),'commands'))}}>Enter simulation commands manually.
	                            </label>
	                        </div>
	                    </div>
	                </div>
	                <div class="form-group" style="margin-top: -10px;">
	                    <label class="col-sm-2 control-label">Simulation Script<br/><include>{{commandshelp}}</include></label>
	                    <div class="path col-sm-10"  {{hide(compare(get('simulate.source'),'commands'))}}>
	                      <input class="form-control paramRef" id="simulate_exec" name="path" value="{{get('simulate.path')}}" type="text"> 
				<span class="help-block"><small>Select the script to execute simulation commands.</small></span>
	                    </div>
	                    <div class="commands  ui-widget col-sm-10"  {{hide(compare(get('simulate.source'),'path'))}}>
<textarea name="commands" class="form-control paramRef" rows="8" style="resize:vertical;" placeholder="Enter commands...">
{{py: commands = get('simulate.commands')}}
{{for command in commands}}
{{command}}
{{endfor}}
</textarea>
	                        <span class="help-block"><small>Enter your simulation commands</small></span>
	                    </div>
	                </div>
	                <!--button style="margin-left: 20px;" class="btn btn-primary insertBtn btn-sm"><i class="fa fa-fw fa-pencil-square-o"></i> Insert Parameter Reference</button-->
	            </form>
	        </div>
	    </div>
	    </div>
	</div>
	<!-- end simulate setup-->
	
	<!-- begin testlist setup-->
{{py:
import tempita, help
testlisthelp = help.get_help_message("testlisthelp", gethelp('testlisthelp.sourcehelp.title'), gethelp('testlisthelp.sourcehelp.message'))
}}
	<div class="row">
		<div class="col-lg-12">
	    <div class="panel panel-info">
	        <div class="panel-heading">
	            <h3 class="panel-title">Testlist Setup
	        </div>
	        <div class="panel-body">
	            <form class="form-horizontal" method="post" role="form" id="testlist-form">
	                <div class="form-group">
	                    <label class="col-sm-2 control-label">What would you like to do<br/>{{testlisthelp}}</include></label>
	                    <div class="col-sm-10">
	                        <div class="radio inline">
	                            <label>
	                                <input type="radio" name="source" value="path"  {{radioyes(compare(get('testlist.source'),'path'))}}/>Use an existing testlist.
	                            </label>
	                        </div>
	                        <div class="radio" checked>
	                            <label>
	                                <input type="radio" name="source" value="content" {{radioyes(compare(get('testlist.source'),'content'))}}/>Enter testlist manually.
	                            </label>
	                        </div>
	                    </div>
	                </div>
	                <div class="form-group" style="margin-top: 0px;">
	                    <label class="col-sm-2 control-label">Testlist</label>
	                    <div class="path col-sm-10" {{hide(compare(get('testlist.source'),'content'))}}>
	                            <input name="path" class="form-control paramRef" value="{{get('testlist.path')}}" type="text"/>
	                        <span class="help-block"><small>Select the testlist file.</small></span>
	                    </div>
	                    <div class="commands col-sm-10" {{hide(compare(get('testlist.source'),'path'))}}>
				<textarea id="ta" name="content" class="form-control" rows="8" style="resize:vertical;" placeholder="Enter your testlist information here">
{{py: lines = get('testlist.content')}}
{{for line in lines}}
{{line}}
{{endfor}}
</textarea>
	                        <span class="help-block"><small>&lt;testname&gt; &lt;repeat_cnt&gt; &lt;seed_values&gt; &lt;param_overrides&gt;</small></span>
	                    </div>
	                </div>
	            </form>
	        </div>
	        </div>
	    </div>
	</div>
	
	<!-- end testlist setup-->
</div>
<script>
    $('#sparam-form').on('keyup change', function() {
        EnableButtons(true); // enable save/reset if any form values are changed
    });

    $('#grid-radio-div').on('change', function() {
        $('#sel-queue').toggle();
        $('#simulate-form input[name="grid-radio"]').each(function (index) {
            $(this).parent().toggleClass("btn-primary");
            $(this).parent().toggleClass("btn-default");
        });
        EnableButtons(true);
                return false;
    });

    $('#saveBtn').on("click", function(e) {
	// parameters
        var params = [];

        // save parameters
        params = getParamssparam();

	// simulate setup
        var simcommands = $('#simulate-form textarea[name="commands"]').val()    || '';
        var simpath     = $('#simulate-form input[name="path"]').val()           || '';
	var simto	= $('#simulate-form input[name="simutimeo"]').val();
        var simsource   = $('#simulate-form input[name="source"]:checked').val() || 'commands';
	var simqueue     = $('#simulate-form select[name="sim-available-queues"] option:selected').val();
        var simgrid  = $('#simulate-form input[name="grid-radio"]').index($('#simulate-form input[name="grid-radio"]:checked'));
        if (simgrid == 0)
                simgrid = "";
        else
                simgrid = "on";
        if (simqueue == "No Queue Selected")
 		simqueue = "";

	// testlist setup
        var listcontent = $('#testlist-form textarea[name="content"]').val()    || '';
        var listpath     = $('#testlist-form input[name="path"]').val()           || '';
        var listsource   = $('#testlist-form input[name="source"]:checked').val() || 'content';

        $.ajax({
            type: "POST",
            url: "/pages/{{suite}}/simulate.htm",
            data: JSON.stringify({
		'simulate.parameters': params,
                'simulate.commands': simcommands.split("\n"),
                'simulate.path':     simpath,
                'simulate.source':   simsource,
		'simulate.queue': simqueue,
		'simulate.grid':  simgrid,
		'simulate.timeout': simto,
                'testlist.content': listcontent.split("\n"),
                'testlist.path':     listpath,
                'testlist.source':   listsource
            }),
            contentType: "application/json; charset=utf-8",
            dataType: "text",
            success: function(data) {
                EnableButtons(false); // disable further save/reset
            },
            failure: function(msg) {
                alert('Error: ' + msg);
            }
        });

        return false;
    });
    $('#cancelBtn').on('click', function(e) {
        if (suiteEditted)
                return ConfirmMove('pages/home.htm');
        else {
                suiteEditted = 0;
                window.location.replace("");
                return false;
        }
    });
    $('#simulate-form').on('keyup', function() {
        EnableButtons(true); // enable save/reset if the mode changes
    });
    $('#simulate-form').on('change', function() {
		var source = $(this).find('input[name="source"]:checked').val();

        if (source == 'path') {
            $(this).find('div.commands').hide(); $(this).find('div.path').show();
        } else {
            $(this).find('div.path').hide(); $(this).find('div.commands').show();
        }

        EnableButtons(true); // enable save/reset if the mode changes
    });
    //
    // Testlist
    //
    $('#testlist-form').on('keyup', function() {
        EnableButtons(true); // enable save/reset if the mode changes
    });
    $('#testlist-form').on('change', function() {
		var source = $(this).find('input[name="source"]:checked').val();

        if (source == 'path') {
            $(this).find('div.commands').hide(); $(this).find('div.path').show();
        } else {
            $(this).find('div.path').hide(); $(this).find('div.commands').show();
        }

        EnableButtons(true); // enable save/reset if the mode changes
    });
   if (suiteEditted == 0) 
	EnableButtons(false);
</script>
